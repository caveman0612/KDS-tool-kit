<?xml version="1.0" encoding="UTF-8"?><unload unload_date="2024-02-13 17:49:25">
<sys_remote_update_set action="INSERT_OR_UPDATE">
<application display_value="Global">global</application>
<application_name>Global</application_name>
<application_scope>global</application_scope>
<application_version/>
<collisions/>
<commit_date/>
<deleted/>
<description>A toolkit for every ServiceNow developer. Find more at http://thewhitespace.io</description>
<inserted/>
<name>[ws] Xplore: Developer Toolkit - 4.5</name>
<origin_sys_id/>
<parent display_value=""/>
<release_date/>
<remote_base_update_set display_value=""/>
<remote_parent_id/>
<remote_sys_id>23c12db8db551b00a2b7ca7e3b9619b9</remote_sys_id>
<state>loaded</state>
<summary/>
<sys_class_name>sys_remote_update_set</sys_class_name>
<sys_created_by>kyle.stinar@continuant.com</sys_created_by>
<sys_created_on>2024-02-13 17:49:24</sys_created_on>
<sys_id>c1bde016dbdc8e10b0fa3fd3e296194c</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>kyle.stinar@continuant.com</sys_updated_by>
<sys_updated_on>2024-02-13 17:49:24</sys_updated_on>
<update_set display_value=""/>
<update_source display_value=""/>
<updated/>
</sys_remote_update_set>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_app_module_02aff9e00f6a020094f3c09ce1050ece</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_app_module"><sys_app_module action="INSERT_OR_UPDATE"><active>true</active><application display_value="[ws] Xplore: Developer Toolkit">4eb000280f2a020094f3c09ce1050e23</application><assessment/><content_page/><device_type/><filter/><hint>Xplore: the ServiceNow developer toolset</hint><homepage/><image/><link_type>DIRECT</link_type><map_page/><mobile_title>Xplore</mobile_title><mobile_view_name>Mobile</mobile_view_name><name/><order/><override_menu_roles>false</override_menu_roles><query>snd_xplore.do</query><report/><roles>admin</roles><survey/><survey_overwrite>true</survey_overwrite><sys_class_name>sys_app_module</sys_class_name><sys_created_by>james@thewhitespace.io</sys_created_by><sys_created_on>2015-09-13 22:42:06</sys_created_on><sys_customer_update>true</sys_customer_update><sys_domain>global</sys_domain><sys_domain_path>/</sys_domain_path><sys_id>02aff9e00f6a020094f3c09ce1050ece</sys_id><sys_mod_count>24</sys_mod_count><sys_name>Xplore</sys_name><sys_overrides/><sys_package display_value="Global" source="global">global</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="[ws] Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</sys_scope><sys_update_name>sys_app_module_02aff9e00f6a020094f3c09ce1050ece</sys_update_name><sys_updated_by>james@thewhitespace.io</sys_updated_by><sys_updated_on>2017-05-20 22:21:54</sys_updated_on><timeline_page/><title>Xplore</title><uncancelable>false</uncancelable><view_name/><window_name>_blank</window_name></sys_app_module></record_update>]]></payload>
<payload_hash/>
<remote_update_set display_value="[ws] Xplore: Developer Toolkit - 4.5">c1bde016dbdc8e10b0fa3fd3e296194c</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>kyle.stinar@continuant.com</sys_created_by>
<sys_created_on>2024-02-13 17:49:24</sys_created_on>
<sys_id>09bde016dbdc8e10b0fa3fd3e296194d</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1628c66dfd80000000</sys_recorded_at>
<sys_updated_by>kyle.stinar@continuant.com</sys_updated_by>
<sys_updated_on>2024-02-13 17:49:24</sys_updated_on>
<table/>
<target_name>Xplore</target_name>
<type>Module</type>
<update_domain>global</update_domain>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_script_include_04cf1a2f0fd2020094f3c09ce1050eba</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;public&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;global.snd_Xplore&lt;/api_name&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description&gt;Exploratory programming script used by Xplore UI. Can also be used anywhere: new snd_Xplore().xplore(obj) will use gs.print to show the object and what it contains.&lt;/description&gt;&lt;name&gt;snd_Xplore&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var snd_Xplore = function () {
  this.prettyPrinter = new snd_Xplore.PrettyPrinter();
  this.default_reporter = 'snd_Xplore.PrintReporter';

  /**
   * {RegExp}
   * Black list to prevent looking over inaccessible Java stuff.
   * The majority of these are fully capitalised properties found on Java Packages
   * which would otherwise throw an exception.
   * There is no point even adding these to the results list.
   * E.g. DB, Y, _XML, M2MMAINTAINORDER
   */
  this.blacklist_regexp = /^[A-Z0-9_$]+$/;
  this.debug = false;
};
snd_Xplore._lists = null;


snd_Xplore.prototype.toString = function () {
  return '[object ' + this.type + ']';
};
snd_Xplore.prototype.type = 'snd_Xplore';

snd_Xplore.prototype.setReporter = function (name) {
  var o = snd_Xplore.dotwalk(typeof window === 'undefined' ? global : window, name);
  if (typeof o !== 'function') throw new Error(name + ' is not a valid reporter class.');
  this.reporter = new o();
  return this.reporter;
};

/**
 * Check if Xplore is being run in a scoped application.
 *
 * @return {Boolean}
 */
snd_Xplore.prototype.isInScope = function () {
  if (typeof window !== 'undefined') return false;
  return !('print' in gs);
};

/**
 * Gets the name of the current scope. e.g. 'global' or 'x_abc_test'
 *
 * @return {string}
 */
snd_Xplore.prototype.getScopeName = function (scope) {
  return scope === global ? 'global' : Object.prototype.toString.call().slice(8, -1);
};

snd_Xplore.prototype.debugMsg = function (msg) {
  if (this.debug) {
    if (typeof window === 'undefined') {
      gs.debug(msg);
    } else {
      jslog(msg);
    }
  }
};

/**
 * summary:
 *
 *
 * description:
 *   The snd_xplore function here allows exploratory programming to take place
 *   in ServiceNow. Simply call new snd_Xplore().xplore(my_obj) in a background
 *   script and watch all the objects get printed out on screen.
 * @summary: Iterate over any object to retrieve its contents.
 *
 * param: obj [Any]
 *   The object you want to explore!
 * param: reporter [String] Optional
 *   The name of the custom reporter object so you can customise where the output gets sent.
 * param: options [Object] Optional
 *   Customise what happens using this options object.
 *   -show_props: [Boolean]
 *     Set false to disable attempting to parse through the objects' properties.
 *     Defaults to true.
 *   -no_quotes: [Boolean]
 *     Set true to prevent quotes from being added to strings.
 *     Defaults to false.
 *   see: lookAt
 */
snd_Xplore.prototype.xplore = function (obj, reporter, options) {
  var is_java_obj,
      target,
      x;

  options = options || {};
  this.prettyPrinter.noQuotes(options.no_quotes);

  if (options.dotwalk) obj = snd_Xplore.dotwalk(obj, options.dotwalk);

  // register the reporter on this object so it works in a scope
  if (reporter || !this.reporter) {
    this.reporter = this.setReporter(reporter || this.default_reporter);
  }
  reporter = this.reporter;

  this.debugMsg('Running xplore in debug mode...');

  target = this.lookAt(obj, '[Target]', options);
  reporter.begin(target);

  this.debugMsg('Exploring object ' + target.name);

  if (options.show_props !== false &amp;&amp; obj !== null &amp;&amp; obj !== undefined) {
    this.xploreProps(obj, reporter, options);
  }

  reporter.complete();
  this.debugMsg('Xplore complete.');
};

snd_Xplore.prototype.xploreProps = function (obj, reporter, options) {
  var lists = snd_Xplore.getLists(),
      type = Object.prototype.toString.call(obj),
      is_java_obj = type.indexOf('Java') &gt; -1,
      is_string = type == '[object String]',
      int_match = /^[0-9.]+$/,
      result,
      name;

  this.debugMsg('Exploring properties...');

  reporter = reporter || {};
  reporter.result = reporter.result || function () {};

  if (type == '[object Function]' &amp;&amp; typeof obj.prototype == 'object') {
    reporter.result(this.lookAt(obj.prototype, 'prototype', options));
  }

  for (name in obj) {

    if (is_string &amp;&amp; name.match(int_match)) {
      // this is a letter in a string
      continue;
    }

    this.debugMsg('Looking at ' + name);

    // if we are evaluating a Java class then we need to check the Blacklist
    // so we don't even attempt to look at that property as it will just
    // halt the thread and generate an illegal access exception.
    if (lists.blacklist.indexOf(',' + name + ',') &gt; -1 || (is_java_obj &amp;&amp; name.match(this.blacklist_regexp))) {
      this.debugMsg(' - blacklisted');
      continue;
    }

    // hard code this here as it breaks with nullPointerException in scopes
    if (name == 'class' &amp;&amp; is_java_obj) {
      this.debugMsg(' - *CLASS*');
      reporter.result({
        name: name,
        type: 'JavaObject',
        string: ''
      });
      continue;
    }

    try {
      result = this.lookAt(obj[name], name, options);
      this.debugMsg(' - ' + result.type);
    } catch (ex) {
      this.debugMsg(' - Exception: ' + ex);
      reporter.result({
        name: name,
        type: '__unknown__',
        string: '[Property access error: ' + ex + ']'
      });
      continue;
    }

    reporter.result(result);

  }
};

/**
  summary:
    The magic method that works out what any object is and even attempts to
    find it's contents.

  description:
    Takes any object and an optional name of that object and returns
    a simple result object containing the details of what was found.

  param: obj [Object]
    Any object that needs to be looked at.
  param: name [String] Optional
    The name of the object to populate the result with.
  param: options [Object] Optional
    An options object.

  returns: Object
    An object containing the following properties:
      -name [String]
        The name of the object if it was provided, otherwise an empty string.
      -type [String]
        The class name of the object.
**/
snd_Xplore.prototype.lookAt = function (obj, name, options) {
  var result = {},
      main_type,
      lists = snd_Xplore.getLists();

  this.prettyPrinter.noQuotes(options.no_quotes);

  result.name = name || undefined;
  result.type = '';
  result.string = null;

  // this covers an independent call to this function - handled by xploreProps
  if (lists.blacklist.indexOf(',' + name + ',') &gt; -1) {
    result.type = '*BLACKLISTED*';
    return result;
  }

  // The try/catch is required for things like new GlideDateTime().tableName
  // which can throw a NullPointerException on access.
  try {

    if (obj === null || obj === undefined) {
      result.type = '' + obj;
      result.string = result.type;
      return result;
    }

    main_type = Object.prototype.toString.call(obj);
    result.type = main_type.slice(8, -1); // get &lt;name&gt; from [Object name]
  } catch (ex) {
    try {
      result.type = main_type = typeof obj;
    } catch (ex2) {
      result.type = '__unknown__';
      result.string = '[Property access error: ' + ex2 + ']';
      return result;
    }
  }

  if (lists.redlist.indexOf(',' + result.type + ',') &gt; -1) {
    result.string = '*REDLIST*';
    return result;
  }

  if (name == 'prototype') {
    result.string = '[object ' + result.type + ']';
    result.type = 'Object';
  } else if (options.show_strings === false) {
    result.string = '*IGNORED*';
  } else {
    result.string = this.prettyPrinter.format(obj);
  }

  return result;
};

snd_Xplore._getPropertyArray = function (name) {
  var result;
  if (typeof window !== 'undefined') {
    result = [];
  } else {
    result = gs.getProperty(name, '').toString();
    result = result ? result.split(',') : [];
  }
  return result;
};

/**
 * Add elements for the black List not captured by RegExp.
 * These property names will be completely ignored.
 *
 * @param {String} item The name of a property name to completely ignore.
 * @arguments Add further item names.
 */
snd_Xplore._blacklist = snd_Xplore._getPropertyArray('snd_xplore.blacklist');
snd_Xplore.blacklist = function (item) {
  if (arguments.length) {
    snd_Xplore._blacklist = snd_Xplore._blacklist.concat(Array.prototype.slice.apply(arguments));
    snd_Xplore._lists = null;
  }
  return snd_Xplore._blacklist;
};

/**
 * Add elements for the red List which must not use toString as they will throw
 * an exception. These property names will still show up in the results.
 *
 * @param {String} item The name of a property name to completely ignore.
 * @arguments Add further item names.
 */
snd_Xplore._redlist = snd_Xplore._getPropertyArray('snd_xplore.redlist');
snd_Xplore.redlist = function (item) {
  if (arguments.length) {
    snd_Xplore._redlist = snd_Xplore._redlist.concat(Array.prototype.slice.apply(arguments));
    snd_Xplore._lists = null;
  }
  return snd_Xplore._redlist;
};

/**
 * Compile the black and red lists into an object.
 *
 * @return {Object}
 *     blacklist {String}
 *     redlist {String}
 */
snd_Xplore.getLists = function () {
  if (snd_Xplore._lists === null) {
    // prefix/suffix with comma so exact search can be made ',foo,'
    snd_Xplore._lists = {
      blacklist: ',' + snd_Xplore._blacklist.join(',') + ',',
      redlist: ',' + snd_Xplore._redlist.join(',') + ','
    };
  }
  return snd_Xplore._lists;
};

/**
 * Navigate down the property chain of a given object.
 *
 * @param {Object} obj The object to navigate.
 * @param {String} path The path to follow, e.g. "child.name". If any property
 *     has a double parentheses, it will be called as a function.
 * @return {Object} The property at the end of the chain.
 * @throws {Error}
 */
snd_Xplore.dotwalk = function (obj, path) {
  // summary:
  //   Dotwalk a path on an object
  var pathArr = path.split('.');
  var o = obj;
  for (var i = 0; i &lt; pathArr.length; i++) {
    path = pathArr[i];
    if (path.indexOf('()') &gt; 0) {
      o = o[path.substr(0, path.length - 2)]();
    } else {
      try {
        o = o[path];
      } catch (ex) {
        throw new Error('Cannot dotwalk with a non-object: ' + pathArr.slice(0, i + 1).join('.'));
      }
    }
  }
  return o;
};

//==============================================================================
// Pretty Printer
//==============================================================================

snd_Xplore.PrettyPrinter = function () {
  this.is_browser = typeof window !== 'undefined';
  this.global = this.is_browser ? window : global;
  this.scope =  (function () { return this; })();
  this.not_str_regex = /^\[[a-zA-Z0-9_$. ]+\]$|^[a-zA-Z0-9.$]+@[a-z0-9]+$/;
};
snd_Xplore.PrettyPrinter.prototype = {

  type: 'PrettyPrinter',

  noQuotes: function (b) {
    this.no_quotes = !!b;
  },

  getClassType: function (obj) {
    return Object.prototype.toString.call(obj).slice(8, -1);
  },

  'String': function (obj) {
    try {
      obj = obj + '';
    } catch (e) {
      obj = Object.prototype.toString.call(obj);
    }

    // handle object types and memory references
    if (this.no_quotes || obj.match(this.not_str_regex)) {
      return obj;
    }

    return '"' + obj + '"';
  },

  'Boolean': function (obj) {
    return obj ? 'true' : 'false';
  },

  'Function': function (obj) {
    return '' + obj;
  },

  'Number': function (obj) {
    return '' + obj;
  },

  'Array': function (obj) {
    var str = [];
    for (var i = 0; i &lt; obj.length; i++) {
      str.push(this.format(obj[i]));
    }
    return '[' + str.join(', ') + ']';
  },

  'SNRegExp': function (obj) {
    return obj.toString();
  },

  'GlideRecord': function (obj) {
    return [
      'table: ' + obj.getLabel() + ' [' + obj.getTableName() + ']',
      'sys_id: ' + obj.getUniqueValue(),
      'display: ' + obj.getDisplayValue(),
      'query: ' + obj.getEncodedQuery()
    ].join('\n');
  },

  'GlideElement': function (obj, type) {
    if (type.indexOf('GlideElementBoolean') &gt; -1) {
      return obj ? 'true' : 'false';
    }
    if (type.indexOf('GlideElementNumeric') &gt; -1) {
      return '' + obj;
    }
    if (type.indexOf('GlideElementHierarchicalVariables') &gt; -1) {
      return ''; // prevent TypeError: Cannot find default value for object.
    }
    if (type == 'GlideElementReference') {
      return this.GlideElementReference(obj);
    }
    try {
      obj = obj.getValue ? obj.getValue() : '' + obj;
      return this.format(obj);
    } catch (ex) {
      return ex.toString();
    }
  },

  'GlideElementReference': function (obj) {
    var result = '"' + obj + '"';
    if (!obj.nil()) {
      result += ' [';
      if (obj.getReferenceTable) {
        result += obj.getReferenceTable() + ' ';
      }
      result += this.String(obj.getDisplayValue()) + ']';
    }
    return result;
  },

  format: function (obj) {
    var real_type = this.getClassType(obj),
        type = real_type.replace('GlideScoped', 'Glide');

    if (this.is_browser) {
      return type in this ? this[type](obj) : '' + obj;
    }

    if (obj === this.global || type == 'global') {
      return '[global scope]';
    }

    if (obj === this.scope) {
      return '[' + type + ' scope]';
    }

    if (type.indexOf('GlideRecord') &gt; -1) return this.GlideRecord(obj);
    if (type.indexOf('GlideElement') &gt; -1) return this.GlideElement(obj, type);

    // handle native JavaScript objects which we know have a toString
    if (obj instanceof Function ||
        obj instanceof Object ||
        obj instanceof Array ||
        type == 'Number' ||
        type == 'Boolean' ||
        type == 'String' ||
        obj instanceof RegExp) {
      return type in this ? this[type](obj) : this.String(obj);
    }

    // Java objects can have the same type but break when calling toString
    // We would only get here if their instanceof did not match.
    if (type === 'Function' || type === 'Object') {
      return '';
    }

    // catch all
    try {
      return this.String(obj);
    } catch (e) {
      return '[object ' + real_type + ']';
    }
  },

  toString: function () {
    return '[object ' + this.type + ']';
  }

};

//==============================================================================
// Default Print Reporter
//==============================================================================

/**
 * Follow this object format in order to build a custom reporter that
 * can be passed into snd_xplore for custom reporting requirements.
 */
snd_Xplore.PrintReporter = function () {
  this._fn = '';
  if (typeof window !== 'undefined') {
    this._fn = typeof console !== undefined &amp;&amp; console.log ? 'console' : 'jslog';
  } else {
    this._fn = 'print' in gs ? 'debug' : 'print';
  }
};
snd_Xplore.PrintReporter.prototype.type = 'PrintReporter';
snd_Xplore.PrintReporter.prototype.toString = function () {
  return '[object ' + this.type + ']';
};

snd_Xplore.PrintReporter.prototype.print = function (str) {
  if (this._fn == 'console') console.log(str);
  else if (this._fn == 'jslog') jslog(str);
  else if (this._fn) gs[this._fn](str);
};

/**
 * Called when the main object is evaluated.
 * @param {Object} obj A result object
 */
snd_Xplore.PrintReporter.prototype.begin = function (result) {
  this.print('Xplore: [' + result.type + '] : ' + result.string);
};

/**
 * Called each time a property of the object is evaluated.
 * @param {Object} result A result object
 */
snd_Xplore.PrintReporter.prototype.result = function (result) {
  this.print('[' + result.type + '] ' + result.name + ' = ' + result.string);
};

/**
 * Called when snd_xplore has finished running.
 */
snd_Xplore.PrintReporter.prototype.complete = function () {
  this.print('Complete.');
};

//==============================================================================
// Object Reporter
//==============================================================================



/**
 * Pushes an array of objects containing two properties describing the message
 * into the response.messages array.
 *
 * Must be run in global scope.
 *
 * @summary Get all the output messages generated in this session, then flush them.
 * @return {Array} An array of objects where each object in the array contains:
 *     type {String} The property type: log, info, error, access
 *     message {String} The message.
 *
**/
snd_Xplore.getOutputMessages = function () {
  var ret = [],
      tmp,
      i;

  if (typeof window !== 'undefined') return ret;

  // access
  tmp = gs.getAccessMessages().toArray();
  for (i = 0; i &lt; tmp.length; i++) {
    ret.push({type: 'access', message: tmp[i]});
  }

  // errors
  tmp = gs.getErrorMessages().toArray();
  for (i = 0; i &lt; tmp.length; i++) {
    ret.push({type: 'error', message: tmp[i]});
  }

  // info
  tmp = gs.getInfoMessages().toArray();
  for (i = 0; i &lt; tmp.length; i++) {
    ret.push({type: 'info', message: tmp[i]});
  }

  // merge gslog workaround for Istanbul onwards
  ret = ret.concat(this._gslogs);

  // gs.print
  tmp = GlideSessionDebug.getOutputMessages().toArray();
  try {
    for (i = 0; i &lt; tmp.length; i++) {
      ret.push({type: 'log', message: ('' + tmp[i].line).replace(' : ', ' ')}); // remove unnecessary colon
    }
  } catch (e) {
    if (tmp.length) {
      ret.unshift({type: 'access', message: '&lt;p&gt;Hey!&lt;p&gt;' +
        '&lt;p&gt;It looks like you\'re using &lt;code&gt;gs.print&lt;/code&gt;, &lt;code&gt;gs.info&lt;/code&gt;, ' +
        '&lt;code&gt;gs.warn&lt;/code&gt; or &lt;code&gt;gs.error&lt;/code&gt; in your script.&lt;/p&gt;' +
        '&lt;p&gt;Unfortunately ServiceNow have locked down the API and we no longer have access to read ' +
        'those messages. You can see them by going to Logs &gt; Node Logs; the time and thread name ' +
        'should be pre-populated for this thread. Alternatively you can replace those methods with ' +
        '&lt;code&gt;gs.addInfoMessage&lt;/code&gt; although I appreciate this doesn\'t work for Script Includes, etc.&lt;/p&gt;' +
        '&lt;p&gt;If you have any insight or can help fix this, please get in touch!&lt;/p&gt;' +
        '&lt;p&gt;Thanks! James&lt;/p&gt;' +
        '&lt;p&gt;&lt;small&gt;Original exception: ' + e.toString() + '&lt;/small&gt;&lt;/p&gt;'});
    }
  } finally {
    // remove all the messages we just retrieved
    GlideSessionDebug.clearOutputMessages();
  }

  gs.flushAccessMessages();
  gs.flushMessages();

  return ret;
};


/**
 * Server side method for getting any errors or warning that occured for the
 * user in the last minute or so. Logs are pushed to the main result object.
 *
 * @return {Array} An array of objects containing the properties:
 *     created {Number]
 *     level {String}
 *     message {String}
 *     source {String}
**/
snd_Xplore.getLogs = function () {
  var ret = [],
      level_map,
      gr;

  if (typeof window !== 'undefined') return ret;

  level_map = {
    '-1': 'Debug',
    '0': 'Info',
    '1': 'Warning',
    '2': 'Error'
  };

  gr = new GlideRecord('syslog');
  gr.addQuery('sys_created_on', 'ON', 'Current minute@javascript:gs.minutesAgoStart(0)@javascript:gs.minutesAgoEnd(0)');
  gr.addQuery('sys_created_by', '=', gs.getUserName())
      .addOrCondition('sys_created_by', '=', 'system');
  gr.addQuery('level', 'IN', '1,2');
  gr.orderBy('sys_created_on');
  gr.query();

  while (gr.next()) {
    ret.push({
      created: gr.sys_created_on.getDisplayValue(),
      level: level_map[gr.getValue('level')],
      message: gr.getValue('message'),
      source: gr.getValue('source')
    });
  }

  return ret;
};

/**
 * A reporter to pass to snd_xplore for capturing results so they can be shown
 * in the UI.
 */
snd_Xplore.ObjectReporter = function () {
  this.is_browser = typeof window !== 'undefined';
  this.start_time = this.is_browser ? new Date() : new GlideDateTime().getDisplayValue();
  this.report = {
    // The type of object that is being evaluated
    type: '',
    // the valueOf value of the object being evaluated
    value: '',
    // the string value of the object being evaluated
    string: '',
    // the list of property objects
    results: [],
    // the list of captured messages
    messages: [],
    // a list of logs that occured very recently
    logs: [],
    // self explanatory really!
    status: '',
    // the url to access the node logs
    node_log_url: ''
  };
};
snd_Xplore.ObjectReporter.prototype.type = 'ObjectReporter';
snd_Xplore.ObjectReporter.prototype.toString = function () {
  return '[object ' + this.type + ']';
};

snd_Xplore.ObjectReporter.prototype.getReport = function () {
  return this.report;
};

snd_Xplore.ObjectReporter.prototype.begin = function (obj) {
  this.report.status = 'started';
  this.report.type = obj.type;
  this.report.value = obj.value;
  this.report.string = obj.string;
};

snd_Xplore.ObjectReporter.prototype.result = function (obj) {
  this.report.results.push(obj);
};

snd_Xplore.ObjectReporter.prototype.complete = function () {
  this.report.status = 'finished';
  this.report.node_log_url = this.generateNodeLogUrl();
};

snd_Xplore.ObjectReporter.prototype.generateNodeLogUrl = function () {
  // create the URL for the ui_page to display the log data
  var maxRows = 2000;
  var url = "ui_page_process.do?name=log_file_browser";

  if (this.is_browser) return '';

  url += "&amp;end_time=" + (new GlideDateTime().getDisplayValue());
  url += "&amp;start_time=" + this.start_time;
  url += "&amp;max_rows=" + maxRows;
  url += '&amp;filter_thread=' + this.getThreadName();
  return url;
};
snd_Xplore.ObjectReporter.prototype.getThreadName = function () {
  // this works around the exceptions thrown by calling getName() or using .name
  // Those are totally broken in Jakarta.
  var value = '' + Object.prototype.valueOf.call(GlideWorkerThread.currentThread());
  var m = value.match(/(?:\[)([^,]+)/);
  if (!m) {
    gs.warn('Cannot get current thread name.', 'snd_Xplore');
    return '';
  }
  return m[1];
};

snd_Xplore.getVersion = function () {
  var gr = new GlideRecord('sys_app');
  gr.addQuery('sys_id', '=', '0f6ab99a0f36060094f3c09ce1050ee8');
  gr.setLimit(1);
  gr.query();
  return gr.next() ? gr.getValue('version') : 'Unknown';
};

///////////////////////////////////////////////////////
// Workaround for log statements in Istanbul onwards //
///////////////////////////////////////////////////////

snd_Xplore._gslogs = [];
snd_Xplore._gslogMessage = function (level, msg, source) {
  var time = new Date().toISOString();
  snd_Xplore._gslogs.push({
    type: level,
    message: time + ': ' + msg,
    source: source
  });
};
snd_Xplore.gsprint = function (msg, source) {
  snd_Xplore._gslogMessage('-1', msg, source);
};
snd_Xplore.gslog = function (msg, source) {
  snd_Xplore._gslogMessage('-1', msg, source);
};
snd_Xplore.gsdebug = function (msg, source) {
  snd_Xplore._gslogMessage('-1', msg, source);
};
snd_Xplore.gsinfo = function (msg, source) {
  snd_Xplore._gslogMessage('0', msg, source);
};
snd_Xplore.gswarn = function (msg, source) {
  snd_Xplore._gslogMessage('1', msg, source);
};
snd_Xplore.gserror = function (msg, source) {
  snd_Xplore._gslogMessage('2', msg, source);
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;james@thewhitespace.io&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2015-09-10 22:27:24&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;true&lt;/sys_customer_update&gt;&lt;sys_id&gt;04cf1a2f0fd2020094f3c09ce1050eba&lt;/sys_id&gt;&lt;sys_mod_count&gt;225&lt;/sys_mod_count&gt;&lt;sys_name&gt;snd_Xplore&lt;/sys_name&gt;&lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="[ws] Xplore: Developer Toolkit"&gt;0f6ab99a0f36060094f3c09ce1050ee8&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_04cf1a2f0fd2020094f3c09ce1050eba&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;james@thewhitespace.io&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-02-05 00:32:31&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash/>
<remote_update_set display_value="[ws] Xplore: Developer Toolkit - 4.5">c1bde016dbdc8e10b0fa3fd3e296194c</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>kyle.stinar@continuant.com</sys_created_by>
<sys_created_on>2024-02-13 17:49:24</sys_created_on>
<sys_id>11bde016dbdc8e10b0fa3fd3e296194f</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1628c66dfd80000000</sys_recorded_at>
<sys_updated_by>kyle.stinar@continuant.com</sys_updated_by>
<sys_updated_on>2024-02-13 17:49:24</sys_updated_on>
<table/>
<target_name>snd_Xplore</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_properties_7ab919cb0fee420094f3c09ce1050e41</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties"><sys_properties action="INSERT_OR_UPDATE"><choices/><description>Log server side scripts that are run using /snd_xplore.do much the same that background scripts do.</description><ignore_cache>false</ignore_cache><is_private>false</is_private><name>snd_xplore.log_request</name><read_roles/><suffix/><sys_class_name>sys_properties</sys_class_name><sys_created_by>james@thewhitespace.io</sys_created_by><sys_created_on>2015-09-21 14:21:13</sys_created_on><sys_customer_update>true</sys_customer_update><sys_id>7ab919cb0fee420094f3c09ce1050e41</sys_id><sys_mod_count>7</sys_mod_count><sys_name>snd_xplore.log_request</sys_name><sys_package display_value="Global" source="global">global</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="[ws] Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</sys_scope><sys_update_name>sys_properties_7ab919cb0fee420094f3c09ce1050e41</sys_update_name><sys_updated_by>james@thewhitespace.io</sys_updated_by><sys_updated_on>2017-05-20 22:21:54</sys_updated_on><type>boolean</type><value>true</value><write_roles/></sys_properties><sys_translated_text action="delete_multiple" query="documentkey=7ab919cb0fee420094f3c09ce1050e41"/></record_update>]]></payload>
<payload_hash/>
<remote_update_set display_value="[ws] Xplore: Developer Toolkit - 4.5">c1bde016dbdc8e10b0fa3fd3e296194c</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>kyle.stinar@continuant.com</sys_created_by>
<sys_created_on>2024-02-13 17:49:24</sys_created_on>
<sys_id>15bde016dbdc8e10b0fa3fd3e296194e</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1628c66dfd80000000</sys_recorded_at>
<sys_updated_by>kyle.stinar@continuant.com</sys_updated_by>
<sys_updated_on>2024-02-13 17:49:24</sys_updated_on>
<table/>
<target_name>snd_xplore.log_request</target_name>
<type>System Property</type>
<update_domain>global</update_domain>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_ui_script_2f4741da0fa6420094f3c09ce1050e22</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ui_script"&gt;&lt;sys_ui_script action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;description&gt;The Xplore UI runner script used on /snd_xplore.do&lt;/description&gt;&lt;global&gt;false&lt;/global&gt;&lt;name&gt;snd_xplore&lt;/name&gt;&lt;script&gt;&lt;![CDATA[/* -----------------------------------------------------
                        XPLORE
------------------------------------------------------*/
var snd_xplore = (function () {

  // load the snd_Xplore script include in the browser - it works in both
  $.getScript('?ui_script');

  function run(params) {
    // summary:
    //   Run some code and send the results to the reporter
    // params: Object
    //   An instruction object

    var reporter = params.reporter || defaultReporter();

    reporter.start(params);

    if (!params.code) {
      var result = psuedoResult();
      message(result, 'error', 'Expression required.');
      reporter.done(result);
      return;
    }

    if (params.runAt == "server") {
      runServerCode(params);
    } else {
      runClientCode(params);
    }
  }

  function runClientCode(params) {
    // summary:
    //   Run the script in the client and get the results
    // params: Object
    //   An instruction object

    var report = psuedoResult();
    var target = findTarget(params.runAt);

    if (target) {
      try {

        // spoof ServiceNow's jslog function
        var _jslog = target.jslog;
        target.jslog = function(msg, src) {
          var d = new Date();
          var timestamp =
            ('0' + d.getHours()).substr(-2) + ':' +
            ('0' + d.getMinutes()).substr(-2) + ':' +
            ('0' + d.getSeconds()).substr(-2) + '.' +
            ('00' + d.getMilliseconds()).substr(-3);
          if (src) {
            msg = timestamp + ': [' + src + '] ' + msg;
          } else {
            msg = timestamp + ': ' + msg;
          }
          message(report, 'log', msg);
        };

        target.user_data = formatUserData(params.user_data, params.user_data_type);
        params.dotwalk = params.breadcrumb;
        var eResult = target.eval(params.code);

        target.jslog = _jslog;

        var x = new snd_Xplore();
        x.xplore(eResult, 'snd_Xplore.ObjectReporter', params);
        var messages = report.messages;
        report = x.reporter.getReport();
        report.messages = messages;
      } catch (e) {
        message(report, 'error', e);
      }
    }

    params.reporter.done(report);

    function formatUserData(str, type) {
      var err = 'Unable to parse User Data as ',
          tmp;
      if (type.indexOf('XMLDocument') &gt; -1) {
        try {
          return jQuery.parseXML(str);
        } catch (e) {
          throw new Error(err + 'XMLDocument. ' + e);
        }
      } else if (type.indexOf('JSON') &gt; -1) {
        try {
          return JSON.parse(str);
        } catch (e) {
          throw new Error(err + 'JSON. ' + e);
        }
      }
      return str;
    }

    function findTarget(runAt) {
      // summary:
      //   Get the client target window for the code
      // runAt: string
      //   The target window: 'opener' or 'frame_{n}'
      //   Leave empty or set false for the standard window
      // return the target window

      var target;
      if (typeof runAt === 'string' &amp;&amp; (runAt == 'opener' || runAt.indexOf('frame_') === 0)) {
        if (!window.opener) {
          message(result, 'error', 'Cannot evaluate in parent; no opener found.');
        } else if (runAt == 'opener') {
          target = window.opener;
        } else {
          var i = parseInt(runAt.split('_')[1], 10);
          target = window.opener.frames.length &gt;= i ? window.opener.frames[i] : false;
          if (!target) {
            message(result, 'error', 'Invalid frame index. Frame ' + i + ' not found.');
          }
        }
      } else {
        target = window;
      }
      return target;
    }
  }

  function runServerCode(params) {
    // summary:
    //   Perform an ajax call to our processor to run the script and get results
    // code: string
    // breadcrumb: array

    function enrichWithLogs(xhr, result) {
      $.ajax({
        type: 'GET',
        url: '/snd_xplore.do?action=logs',
        dataType: 'json'
      })
      .done(function (data) {
        var result = data.result;
        if (xhr.responseText) {
          message(result, '1', xhr.responseText); // 1 = warning
        } else {
          message(result, 'error', 'Request failed.');
        }
        params.reporter.done(result);
      })
      .fail(function () {
        var result = result || psuedoResult();
        message(result, 'error', 'Automatic log retrieval failed.');
        if (xhr.responseText) message(result, '1', xhr.responseText); // 1 = warning
        params.reporter.done(result);
      });
    }

    $.ajax({
      type: "POST",
      url: "/snd_xplore.do?action=run",
      data: {
        data: JSON.stringify({
          code: params.code,
          user_data: params.user_data,
          user_data_type: params.user_data_type,
          breadcrumb: params.breadcrumb,
          scope: $('#scope').val(),
          no_quotes: params.no_quotes,
          show_props: params.show_props,
          show_strings: params.show_strings,
          fix_gslog: params.fix_gslog
        })
      },
      dataType: "json"
    })
    .done(function (data) {
      var result;
      if (!data || (!data.result &amp;&amp; !data.$error)) {
        result = psuedoResult();
        message(result, 'error', 'The server did not return anything. This is likely because' +
            ' of an uncatchable error. Please check the node logs for the possibility' +
            ' of further information if you are unsure of the cause.');
        enrichWithLogs({}, result);
        return;
      }

      result = data.result || psuedoResult();
      if (data.$error) {
        message(result, 'error', data.$error);
      } else if (!data.result) {
        message(result, 'error', 'Request processing failed without an error. Please check the logs.');
        enrichWithLogs({}, result);
      }
      if (!data.result) {
        if (data.$error) {
        } else {
        }
      }

      params.reporter.done(result);
    })
    .fail(enrichWithLogs);
  }

  function psuedoResult() {
    // summary:
    //   Replicate the result object returned by the server

    return {
      type: '',
      string: '',
      results: [],
      messages: []
    };
  }

  function message(result, type, value) {
    // summary:
    //   Write a message to the result object
    // type: string
    // value: string

    result.messages.push({
      type: '' + type,
      message: '' + value
    });
  }

  function defaultReporter() {
    return {
      start: function () {
        // summary:
        //   called when the code evaluation begins

        snd_log('Begin Xplore default reporter.');
      },
      done: function (result) {
        // summary:
        //   called when the code evaluation is complete

        snd_log('Xplore complete.', result);
      }
    };
  }

  return run;

})();

/* -----------------------------------------------------
                        LOG
------------------------------------------------------*/

/**
  summary:
    Ensure that the snd_log function is created. Used to ensures that scripts
    do not break when console isn't available.
  arguments: mixed
    All arguments are printed to the log (when console is available)
**/
if (typeof window.snd_log !== 'function') {
  window.snd_log = (function () {
    if (typeof console == 'object' &amp;&amp; typeof console.log == 'function') {
      return function () {
        for (var i = 0; i &lt; arguments.length; i++) console.log(arguments[i]);
      };
    }
    return function () {};
  })();
}

/* -----------------------------------------------------
                        REGEX
------------------------------------------------------*/
snd_xplore.regex = (function () {

  /**
    summary:
      The main function for evaluating the regex call.
    returns: type
  **/
  function testRegex(config) {
    testRegex.fireEvent('start');

    var expression = config.expression;
    var options = config.options;
    var input = config.input;

    if (config.target == 'server') {
      testServerRegex(input, expression, options);
    } else {
      testClientRegex(input, expression, options);
    }
  }

  /**
    summary:
      Display the results on screen
    result: Object
      See resultGenerator()
  **/
  function displayRegexResult(result) {
    var data = {};
    if (result) {
      if (result.error) {
        data.error = result.error;
      } else if (!result.error &amp;&amp; !result.matches.length) {
        data.error = 'No match.';
      } else {
          data = processResult(result);
      }
    } else {
      data.error = 'ParseError: No regex result to process.';
    }
    testRegex.fireEvent('done', this, [data]);
  }

  /**
    summary:
      Process a regex result and display it on screen
    result: Object
      An object containing:
      matches: Array [Object]
        Collection of match objects each with an index and length
      groups: Array [String]
        Collection of groups that were matched
      input:
        The original input
  **/
  function processResult(result) {
    var input = result.input,
        ret = {
          matches: [],
          groups: result.groups || []
        };

    function addMatch(text, type) {
      ret.matches.push({
        text: text,
        type: type || ''
      });
    }

    if (result.matches.length) {
      var lastEnd = 0;
      $.each(result.matches, function (i, item) {
        addMatch(input.substr(lastEnd, item.index - lastEnd));
        addMatch(input.substr(item.index, item.length), 'match');
        lastEnd = item.index + item.length;
      });
      addMatch(input.substr(lastEnd));
    }

    return ret;
  }

  /**
    summary:
      Evaluate a regular expression against a string
    input: String
      The string to test with the regex.
    expression: String
      The regular expression as a string
    options: String (Optional)
      The regular exression options, e.g. 'g'
    returns: Object
  **/
  function evalRegex(input, expression, options) {
    var regex,
        matches = [],
        groups = [],
        m,
        loop = options ? options.toString().indexOf('g') &gt;= 0: false;

    if (input &amp;&amp; expression) {
      options += '';
      try {
        regex = new RegExp(expression, options);
      } catch (e) {
        return {
          error: '' + e
        };
      }
      while ((m = regex.exec(input))) {
        matches.push({
          index: m.index,
          length: m[0].length
        });
        groups.push(m.slice(1));
        if (!loop) break;
      }
    }
    return {
      matches: matches,
      groups: groups,
      input: input
    };
  }

  function testClientRegex(input, expression, options) {
    try {
      var result = evalRegex(input, expression, options);
      displayRegexResult(result);
    } catch (e) {
      var estr = '' + e;
      var index = estr.indexOf(input);
      if (index &gt;= 0) {
        estr = estr.substr(index + input.length + 4);
      }
      error(estr);
    }
  }

  function error(text) {
    testRegex.fireEvent('done', this, [{error: text}]);
  }

  var testServerRegex = (function () {
    var xhr;
    return function testServerRegex(input, expression, options) {
      if (xhr &amp;&amp; xhr.readyState != 4) {
        xhr.abort();
      }
      xhr = $.ajax({
        type: "POST",
        url: "/snd_xplore.do?action=regex",
        data: {
          data: JSON.stringify({
            input: input,
            expression: expression,
            options: options
          })
        },
        dataType: "json"
      }).
      done(function (data) {
        displayRegexResult(data.result);
      }).
      fail(function (xhr, status) {
        if (status != 'abort') {
          snd_log('Server regex call failed.');
        }
      });
    };
  })();

  var events = {};

  testRegex.addEvent = function (name, fn) {
    if (typeof events[name] !== 'object') {
      events[name] = [];
    }
    events[name].push(fn);
  };

  testRegex.fireEvent = function (name, scope, args) {
    var eventArr = typeof events[name] === 'object' ? events[name] : null;
    if (!eventArr) return;
    for (var i = 0; i &lt; eventArr.length; i++) {
      if (typeof eventArr[i] === 'function') {
        eventArr[i].apply(scope || this, args);
      }
    }
  };

  return testRegex;
})();]]&gt;&lt;/script&gt;&lt;script_name/&gt;&lt;sys_class_name&gt;sys_ui_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;james@thewhitespace.io&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2015-09-19 05:04:58&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;true&lt;/sys_customer_update&gt;&lt;sys_id&gt;2f4741da0fa6420094f3c09ce1050e22&lt;/sys_id&gt;&lt;sys_mod_count&gt;153&lt;/sys_mod_count&gt;&lt;sys_name&gt;snd_xplore&lt;/sys_name&gt;&lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="[ws] Xplore: Developer Toolkit"&gt;0f6ab99a0f36060094f3c09ce1050ee8&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_script_2f4741da0fa6420094f3c09ce1050e22&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;james@thewhitespace.io&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-02-04 22:37:56&lt;/sys_updated_on&gt;&lt;use_scoped_format&gt;false&lt;/use_scoped_format&gt;&lt;/sys_ui_script&gt;&lt;/record_update&gt;</payload>
<payload_hash/>
<remote_update_set display_value="[ws] Xplore: Developer Toolkit - 4.5">c1bde016dbdc8e10b0fa3fd3e296194c</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>kyle.stinar@continuant.com</sys_created_by>
<sys_created_on>2024-02-13 17:49:24</sys_created_on>
<sys_id>19bde016dbdc8e10b0fa3fd3e2961950</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1628c66dfd80000000</sys_recorded_at>
<sys_updated_by>kyle.stinar@continuant.com</sys_updated_by>
<sys_updated_on>2024-02-13 17:49:24</sys_updated_on>
<table/>
<target_name>snd_xplore</target_name>
<type>UI Script</type>
<update_domain>global</update_domain>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_ui_context_menu_d20bc0f8dbf38300b1307b5b8c9619ff</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_ui_context_menu"&gt;&lt;sys_ui_context_menu action="INSERT_OR_UPDATE"&gt;&lt;action_script&gt;&lt;![CDATA[snd_xplore_list.openQuery();]]&gt;&lt;/action_script&gt;&lt;active&gt;true&lt;/active&gt;&lt;comments/&gt;&lt;condition&gt;gs.hasRole('admin')&lt;/condition&gt;&lt;do_not_cache&gt;false&lt;/do_not_cache&gt;&lt;dynamic_actions_script&gt;&lt;![CDATA[/** 
 * This server-side script is used to dynamically create actions for the context menu, such as the list of available templates 
 * 
 * The following variables are available to the script: 
 *    'g_tableName' the name of the current table 
 *    'g_listId' the id of the list we are building the context menu for 
 *    'g_itemName' the name of the UI Context Menu item we are building 
 *    'g_itemOrder' the order defined in the UI Context Menu item we are building 
 * 
 * Add items to the context menu by calling: 
 *    g_contextMenu.addAction(item_id, label, script_string, order); 
 */ 
]]&gt;&lt;/dynamic_actions_script&gt;&lt;menu&gt;list_header&lt;/menu&gt;&lt;name&gt;Open List in Xplore&lt;/name&gt;&lt;on_show_script&gt;&lt;![CDATA[/**
 * This client-side script is used to dynamically change the context menu before it is displayed.
 * It is called before showing the context menu if the Run onShow script flag is checked.
 *
 * The following variables are available to the script:
 *    'g_menu' the context menu that is about to be shown
 *    'g_item' the current context menu item
 *    'g_list' the GlideList2 that the script is running against (only valid for List context menus)
 *    'g_fieldName' the name of the field that the context menu is running against (only valid for List context menus)
 *    'g_fieldLabel' the label of the field that the context menu is running against (only valid for List context menus)
 *    'g_sysId' the sys_id of the row or form that the script is running against
 */
 
]]&gt;&lt;/on_show_script&gt;&lt;order&gt;116000&lt;/order&gt;&lt;parent/&gt;&lt;run_on_show_script&gt;false&lt;/run_on_show_script&gt;&lt;sys_class_name&gt;sys_ui_context_menu&lt;/sys_class_name&gt;&lt;sys_created_by&gt;james@thewhitespace.io&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-01-18 20:54:23&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;true&lt;/sys_customer_update&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;d20bc0f8dbf38300b1307b5b8c9619ff&lt;/sys_id&gt;&lt;sys_mod_count&gt;4&lt;/sys_mod_count&gt;&lt;sys_name&gt;Open List in Xplore&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="[ws] Xplore: Developer Toolkit" source="0f6ab99a0f36060094f3c09ce1050ee8"&gt;0f6ab99a0f36060094f3c09ce1050ee8&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="[ws] Xplore: Developer Toolkit"&gt;0f6ab99a0f36060094f3c09ce1050ee8&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_context_menu_d20bc0f8dbf38300b1307b5b8c9619ff&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;james@thewhitespace.io&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-01-18 21:22:38&lt;/sys_updated_on&gt;&lt;table&gt;global&lt;/table&gt;&lt;track_selected&gt;false&lt;/track_selected&gt;&lt;type&gt;action&lt;/type&gt;&lt;/sys_ui_context_menu&gt;&lt;/record_update&gt;</payload>
<payload_hash/>
<remote_update_set display_value="[ws] Xplore: Developer Toolkit - 4.5">c1bde016dbdc8e10b0fa3fd3e296194c</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>kyle.stinar@continuant.com</sys_created_by>
<sys_created_on>2024-02-13 17:49:24</sys_created_on>
<sys_id>1dbde016dbdc8e10b0fa3fd3e296194f</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1628c66dfd80000000</sys_recorded_at>
<sys_updated_by>kyle.stinar@continuant.com</sys_updated_by>
<sys_updated_on>2024-02-13 17:49:24</sys_updated_on>
<table>global</table>
<target_name>Open List in Xplore</target_name>
<type>Context Menu</type>
<update_domain>global</update_domain>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_app_application_4eb000280f2a020094f3c09ce1050e23</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_app_application"><sys_app_application action="INSERT_OR_UPDATE"><active>true</active><category display_value="Custom Applications">e0355b31ef303000a61d5a3615c0fb78</category><description>An application for linking Xplore to the ServiceNow UI.&#13;
The Xplore module attempts to create a nice link in the navigation bar for easy access to Xplore.</description><device_type>browser</device_type><hint/><name/><order>100</order><roles>admin</roles><sys_class_name>sys_app_application</sys_class_name><sys_created_by>james@thewhitespace.io</sys_created_by><sys_created_on>2015-09-13 13:26:54</sys_created_on><sys_customer_update>true</sys_customer_update><sys_domain>global</sys_domain><sys_domain_path>/</sys_domain_path><sys_id>4eb000280f2a020094f3c09ce1050e23</sys_id><sys_mod_count>7</sys_mod_count><sys_name>[ws] Xplore: Developer Toolkit</sys_name><sys_overrides/><sys_package display_value="Global" source="global">global</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="[ws] Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</sys_scope><sys_update_name>sys_app_application_4eb000280f2a020094f3c09ce1050e23</sys_update_name><sys_updated_by>james@thewhitespace.io</sys_updated_by><sys_updated_on>2017-10-27 09:02:24</sys_updated_on><title>[ws] Xplore: Developer Toolkit</title><view_name/></sys_app_application></record_update>]]></payload>
<payload_hash/>
<remote_update_set display_value="[ws] Xplore: Developer Toolkit - 4.5">c1bde016dbdc8e10b0fa3fd3e296194c</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>kyle.stinar@continuant.com</sys_created_by>
<sys_created_on>2024-02-13 17:49:24</sys_created_on>
<sys_id>45bde016dbdc8e10b0fa3fd3e296194d</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1628c66dfd80000000</sys_recorded_at>
<sys_updated_by>kyle.stinar@continuant.com</sys_updated_by>
<sys_updated_on>2024-02-13 17:49:24</sys_updated_on>
<table/>
<target_name>[ws] Xplore: Developer Toolkit</target_name>
<type>Application Menu</type>
<update_domain>global</update_domain>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_properties_28f0585edb08d700b1307b5b8c961939</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties"><sys_properties action="INSERT_OR_UPDATE"><choices/><description>Allow Xplore server scripts to be executed in Production instances. Set this to false for real Production instances to be safe. This does not affect the read-only utilities in Xplore which will always work.</description><ignore_cache>false</ignore_cache><is_private>false</is_private><name>snd_xplore.production_access</name><read_roles/><suffix/><sys_class_name>sys_properties</sys_class_name><sys_created_by>james@thewhitespace.io</sys_created_by><sys_created_on>2018-02-04 23:25:22</sys_created_on><sys_customer_update>true</sys_customer_update><sys_id>28f0585edb08d700b1307b5b8c961939</sys_id><sys_mod_count>3</sys_mod_count><sys_name>snd_xplore.production_access</sys_name><sys_package display_value="[ws] Xplore: Developer Toolkit" source="0f6ab99a0f36060094f3c09ce1050ee8">0f6ab99a0f36060094f3c09ce1050ee8</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="[ws] Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</sys_scope><sys_update_name>sys_properties_28f0585edb08d700b1307b5b8c961939</sys_update_name><sys_updated_by>james@thewhitespace.io</sys_updated_by><sys_updated_on>2018-02-05 00:08:50</sys_updated_on><type>boolean</type><value>true</value><write_roles/></sys_properties><sys_translated_text action="delete_multiple" query="documentkey=28f0585edb08d700b1307b5b8c961939"/></record_update>]]></payload>
<payload_hash/>
<remote_update_set display_value="[ws] Xplore: Developer Toolkit - 4.5">c1bde016dbdc8e10b0fa3fd3e296194c</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>kyle.stinar@continuant.com</sys_created_by>
<sys_created_on>2024-02-13 17:49:24</sys_created_on>
<sys_id>51bde016dbdc8e10b0fa3fd3e296194e</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1628c66dfd80000000</sys_recorded_at>
<sys_updated_by>kyle.stinar@continuant.com</sys_updated_by>
<sys_updated_on>2024-02-13 17:49:24</sys_updated_on>
<table/>
<target_name>snd_xplore.production_access</target_name>
<type>System Property</type>
<update_domain>global</update_domain>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_ui_script_f5058478db378300b1307b5b8c96197d</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ui_script"&gt;&lt;sys_ui_script action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;description&gt;Allow UI Context Menus to open a prebuilt script for admins to use in Xplore&lt;/description&gt;&lt;global&gt;true&lt;/global&gt;&lt;name&gt;snd_xplore_glist&lt;/name&gt;&lt;script&gt;&lt;![CDATA[/**
 * Allow UI Context Menus to open a prebuilt script for admins to use in Xplore.
 *
 * Thanks to Jim Coyne for the original version of this.
 * https://community.servicenow.com/community/develop/blog/2016/06/10/xplore-gliderecord-script-tool
 */
var snd_xplore_list = {};

/**
 * Open the list query in Xplore.
 *
 */
snd_xplore_list.openQuery = function openQuery() {
	var query = ('' + g_list.getFixedQuery()).replace('null', '');
	if (query == '') {
		query = ('' + g_list.getRelatedQuery()).replace('null', '');
	}

	var user_query = '' + g_list.getQuery();
	if (user_query) {
		query = query ? '^' + user_query : user_query;
	}

	var newline = '\n';
	var script = 'function run() {' + newline;
	script += '    var gr = new GlideRecord(\'' + g_list.tableName + '\');' + newline;
	if (query) {
		script += '    gr.addEncodedQuery(\'' + query + '\');' + newline;
	}
	script += '    //gr.orderBy(\'name\');' + newline;
	script += '    //gr.setLimit(100);' + newline;
	script += '    //gr.setWorkflow(false);' + newline;
	script += '    //gr.autoSysFields(false);' + newline;
	script += '    gr.query();' + newline;
	script += '    ' + newline;
	script += '    var log = [];' + newline;
	script += '    while (gr.next()) {' + newline;
	script += '        log.push(gr.getDisplayValue());' + newline;
	script += '        ' + newline;
	script += '    }' + newline;
	script += '    return log;' + newline;
	script += '}' + newline;
	script += 'run();';

	snd_xplore_list.open(script);
};

/**
 * Open the single Record in Xplore.
 *
 */
snd_xplore_list.openRecord = function openRow() {
	var newline = '\n';
	var script = 'var gr = new GlideRecord(\'' + g_list.tableName + '\');' + newline;
	script += 'gr.get(\'' + g_sysId + '\');' + newline;
	script += 'gr;';

	snd_xplore_list.open(script);
};

/**
 * Open a new Xplore window and set the script.
 *
 */
snd_xplore_list.open = function open(script) {
	// open Xplore in a new window
	var win = window.open('/snd_xplore.do');

	// when Xplore has loaded, set the script
	jQuery(win).bind('load', function(){
		win.snd_xplore_editor.setValue(script);
	});
};]]&gt;&lt;/script&gt;&lt;script_name/&gt;&lt;sys_class_name&gt;sys_ui_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;james@thewhitespace.io&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-01-18 20:27:26&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;true&lt;/sys_customer_update&gt;&lt;sys_id&gt;f5058478db378300b1307b5b8c96197d&lt;/sys_id&gt;&lt;sys_mod_count&gt;8&lt;/sys_mod_count&gt;&lt;sys_name&gt;snd_xplore_glist&lt;/sys_name&gt;&lt;sys_package display_value="[ws] Xplore: Developer Toolkit" source="0f6ab99a0f36060094f3c09ce1050ee8"&gt;0f6ab99a0f36060094f3c09ce1050ee8&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="[ws] Xplore: Developer Toolkit"&gt;0f6ab99a0f36060094f3c09ce1050ee8&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_script_f5058478db378300b1307b5b8c96197d&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;james@thewhitespace.io&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-01-18 21:20:49&lt;/sys_updated_on&gt;&lt;use_scoped_format&gt;false&lt;/use_scoped_format&gt;&lt;/sys_ui_script&gt;&lt;/record_update&gt;</payload>
<payload_hash/>
<remote_update_set display_value="[ws] Xplore: Developer Toolkit - 4.5">c1bde016dbdc8e10b0fa3fd3e296194c</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>kyle.stinar@continuant.com</sys_created_by>
<sys_created_on>2024-02-13 17:49:24</sys_created_on>
<sys_id>51bde016dbdc8e10b0fa3fd3e2961951</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1628c66dfd80000000</sys_recorded_at>
<sys_updated_by>kyle.stinar@continuant.com</sys_updated_by>
<sys_updated_on>2024-02-13 17:49:24</sys_updated_on>
<table/>
<target_name>snd_xplore_glist</target_name>
<type>UI Script</type>
<update_domain>global</update_domain>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_ui_script_2d6d96b70f5d528094f3c09ce1050e85</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ui_script"&gt;&lt;sys_ui_script action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;description&gt;Controls the SND Xplore UI&lt;/description&gt;&lt;global&gt;false&lt;/global&gt;&lt;name&gt;snd_xplore_ui&lt;/name&gt;&lt;script&gt;&lt;![CDATA[/*
  Controls the SND Xplore UI
*/

// Delay a function, overriding any previous calls for the same id
var delay = (function () {
  var timers = {};
  return function (id, callback, ms) {
    clearTimeout(timers[id]);
    timers[id] = setTimeout(callback, ms);
  };
})();

// get the minutes, seconds and decisecond since a given time, e.g. 01:32.1
function getMinutesSince(startTime) {
  var t = new Date().getTime() - startTime;
  var ds = Math.floor((t/100) % 10);
  var seconds = Math.floor((t/1000) % 60);
  var minutes = Math.floor((t/1000/60) % 60);
  var hours   = Math.floor(t/1000/60/60);
  if (minutes &lt; 10) minutes = '0' + minutes;
  if (seconds &lt; 10) seconds = '0' + seconds;
  if (hours   &lt; 10) hours   = '0' + hours;
  return hours + ':' + minutes + ':' + seconds + '.' + ds;
}

// main UI object
var snd_xplore_ui = {};

/*************************************
              XPLORE
**************************************/

var snd_xplore_util = {
  countup_interval: null,
  node_log_url: '',
  loading: function () {
    $timer = $('#timer');
    $('#xplore_btn')
        .prop('disabled', true)
        .html('Loading... &lt;i class="glyphicon glyphicon-refresh spin"&gt;&lt;/i&gt;');

    $('#cancel_btn').prop('disabled', false).text('Cancel').show();
    $('#output_loader').addClass('active');

    $timer.text('');
    var start = new Date().getTime();
    snd_xplore_util.countup_interval = setInterval(function () {
      $timer.text(getMinutesSince(start));
    }, 100);
  },
  loadingComplete: function () {
    $('#xplore_btn')
        .html('Run')
        .prop('disabled', false);

    $('#cancel_btn').hide();
    $('#output_loader').removeClass('active');
    // make sure we are on the output tab
    $('#script_output_tab').tab('show');
    // scroll to the top of the output div
    $('#output_tabs_pane').animate({ scrollTop: 0 }, "fast");

    clearInterval(snd_xplore_util.countup_interval);

    // Google Code-Prettify
    window.PR.prettyPrint();
  },
  getCode: function () {
    var code = '';
    if (typeof snd_xplore_editor === 'object') {
      code = snd_xplore_editor.getValue();
    } else {
      code = document.getElementById('snd_xplore').value;
    }
    return code;
  },
  execute: function () {
    // summary:
    //   Gather the data from the client and run Xplore
    var params = {
      code: snd_xplore_util.getCode(),
      user_data: document.getElementById('user_data_input').value,
      user_data_type: document.getElementById('user_data_type_select').value,
      runAt: document.getElementById('target').value,
      breadcrumb: snd_xplore_reporter.getBreadcrumb(),
      reporter: snd_xplore_reporter,
      no_quotes: !$('#setting_quotes').is(':checked'),
      show_props: $('#show_props').is(':checked'),
      show_strings: $('#show_strings').is(':checked'),
      html_messages: $('#show_html_messages').is(':checked'),
      fix_gslog: $('#fix_gslog').is(':checked')
    };

    snd_xplore(params);
  },
  executeNew: function () {
    snd_xplore_reporter.clearBreadcrumb();
    this.execute();
  },
  demo: function (code, user_data) {
    var $user_data_input;

    snd_xplore_util.toggleEditor(true, function () {

      if (snd_xplore_editor.getValue()) {
        if (!confirm('Replace code with demo?')) {
          return;
        }
      }

      if (user_data) {
        $('#user_data_tab').tab('show');
        $user_data_input = $('#user_data_input');
        if ($user_data_input.val()) {
          if (!confirm('Replace user data with demo user data?')) {
            return;
          }
        }
        $user_data_input.val(user_data);
      }

      $('#target').val('server');
      $('#scope').val('global');
      snd_xplore_editor.setValue(code);
      snd_xplore_editor.focus();
    });
  },
  formatString: function () {
    var $user_data_input = $('#user_data_input'),
        $user_data_type = $('#user_data_type_select');
    $.ajax({
      type: "POST",
      url: "/snd_xplore.do?action=formatString&amp;type=" + $user_data_type.val(),
      data: {
        string: $user_data_input.val()
      }
    }).
    done(function (data) {
      $user_data_input.val(data.result);
    }).
    fail(function () {
      snd_log('Error: could not format string.');
    });
  },
  toggleEditor: (function () {
    var output_left = 300;
    var state = 1;
    return function (force, callback) {
      var $this = $('#editor_toggle');
      var $editor = $('#editor');
      var $output = $('#output');
      if ((force === true &amp;&amp; state === 1) || (force === false &amp;&amp; state === 0)) {
        if (typeof callback === 'function') callback();
        return;
      }
      if ($editor.is(":hidden") || force === true) {
        $output.animate({left: $editor.outerWidth()}, 400, function () {
          $editor.fadeIn(400);
          $this.addClass('active');
          state = 1;
          if (typeof callback === 'function') callback();
        });
      } else {
        $editor.fadeOut(400, function () {
          $output.animate({left: 0}, 400, function () {
            output_left = $output.css('left');
            $this.removeClass('active');
            state = 0;
            if (typeof callback === 'function') callback();
          });
        });
      }
    };
  })(),
  cancel: function () {
    // add status=true to get the current status
    $.ajax('/cancel_my_transaction.do?sysparm_output=xml', {
      dataType: 'xml'
    });
    $('#cancel_btn').prop('disabled', true).text('Cancelling...');
  }
};

$('.xplore_demo').on('click', 'a', function (e) {
  e.preventDefault();
  $this = $(this);
  var code = [],
      user_data;
  switch ($this.attr('data-demo')) {
    case 'GlideRecord':
      code.push('var gr = new GlideRecord("incident");');
      code.push('//gr.addQuery("");');
      code.push('gr.setLimit(1);');
      code.push('gr.query();');
      code.push('gr.next();');
      code.push('gr');
      break;
    case 'GlideRecord.get':
      code.push('var gr = new GlideRecord("incident");');
      code.push('gr.get("sys_id", "foo");');
      code.push('gr');
      break;
    case 'Array':
      code.push("var a = [];");
      code.push("a.push(['a', 'b', 'c']);");
      code.push("a.push(['x', 'y', 'z']);");
      code.push("a");
      break;
    case 'GlideUser':
      code.push("gs.getUser();");
      break;
    case 'Logging':
      code.push('gs.log("Hello world from gs.log")');
      code.push('gs.print("Hello world from gs.print (not compatible with scopes)")');
      code.push('gs.info("Hello world from gs.info")');
      code.push('gs.warn("Hello world from gs.warn")');
      code.push('gs.error("Hello world from gs.error")');
      code.push('gs.addInfoMessage("Hello world from.gs.addInfoMessage")');
      code.push('gs.addErrorMessage("Hello world from gs.addErrorMessage")');
      break;
    case 'scope':
      code.push("this");
      break;
    case 'user_data':
      code.push('var doc = new XMLDocument(user_data);');
      code.push('doc.toIndentedString();');
      user_data = '&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;xml&gt;&lt;incident&gt;&lt;active&gt;true&lt;/active&gt;&lt;/incident&gt;&lt;/xml&gt;';
      break;
  }
  if (code) {
    snd_xplore_util.demo(code.join('\n'), user_data);
  }
});


/*************************************
              REGEX
**************************************/

var snd_xplore_regex_util = (function () {
  $intro_panel   = $('#regex_intro_panel');
  $match_panel   = $('#regex_match_panel');
  $group_panel   = $('#regex_group_panel');
  $error_panel   = $('#regex_error_panel');
  $result        = $('#regex_match');
  $result_groups = $('#regex_group');
  function showIntro() {
    $match_panel.hide();
    $group_panel.hide();
    $error_panel.hide();
    $intro_panel.fadeIn();
  }
  function showError(text) {
    $('#regex_error').empty().append(text);
    $intro_panel.hide();
    $match_panel.hide();
    $group_panel.hide();
    $error_panel.fadeIn();
  }
  function showResult(matches, groups) {
    $intro_panel.hide();
    $error_panel.hide();
    $result.empty().append(matches);
    $match_panel.fadeIn();
    if (groups) {
      $result_groups.empty().append(groups);
      $group_panel.fadeIn();
    } else {
      $group_panel.hide();
    }
  }

  snd_xplore.regex.addEvent('start', function () {
    $('#regex_loading').fadeIn();
  });

  var escapeHtml = (function () {
    var map = {
      '&lt;': '&amp;lt;',
      '&gt;': '&amp;gt;',
      '&amp;': '&amp;amp;'
    };
    var replace = function (c) {
      return map[c];
    };
    return function (text) {
      return text.replace(/&lt;|&gt;|&amp;/g, replace);
    };
  })();

  snd_xplore.regex.addEvent('done', function(result) {
    var matchHtml, groupHtml;
    if (result) {
      if (result.error) {
        showError(result.error);
      } else if (result.matches){
        matchHtml = '';
        $.each(result.matches, function (i, item) {
          item.text = escapeHtml(item.text);
          if (item.type == 'match') {
            matchHtml += '&lt;span class="bg-success text-success"&gt;' + item.text + '&lt;/span&gt;';
          } else {
            matchHtml += item.text;
          }
        });
        groupHtml = '';
        if (result.groups) {
          if (result.groups.join('').length) {
            $.each(result.groups, function (i, item) {
              groupHtml += '&lt;h5 class="text-danger"&gt;Match ' + (i + 1) + '&lt;/h5&gt;';
              groupHtml += '&lt;ol&gt;';
              $.each(item, function (i, group) {
                groupHtml += '&lt;li&gt;' + escapeHtml(group) + '&lt;/li&gt;';
              });
              groupHtml += '&lt;/ol&gt;';
            });
          }
        }
        showResult(matchHtml, groupHtml);
      } else {
        showError('No result was given.');
      }
    } else {
      showIntro();
    }
    $('#regex_loading').hide();
  });

  function updateExample() {

  }

  // setup the handler to run the regex when the user edits something
  var run = (function () {
    var cache = '';
    return function () {
      var expression = $('#regex').val();
      var input = $('#regex_input').val();
      var options = $('#regex_options').val();
      var $code = $('#regex_code');

      if (!expression || !input) {
        $code.hide();
        showIntro();
        return;
      }

      if (cache === input + expression + options) {
        return;
      }
      cache = input + expression + options;

      $code.text('/' + expression + '/' + options).show();

      snd_xplore.regex({
        expression: expression,
        input:      input,
        options:    options,
        target:     $('#target').val()
      });
    };
  })();

  return {
    run: run
  };
})();


/*************************************
              TABLES
**************************************/

var snd_xplore_table_util = (function () {

  var api = {
    tables: {},
    current: ''
  };

  function loadTables() {
    $.ajax({
      type: 'GET',
      url: '/snd_xplore.do?action=getTables',
      dataType: 'json'
    }).
    done(function (data) {
      api.tables = data.result;
    }).
    fail(function () {
      snd_log('Error: loadTables failed.');
    });
  }
  api.loadTables = loadTables;

  function getTableHierarchy(table, search_labels) {
    loading(true);
    api.current = table;
    api.term = ((table.indexOf('&gt;') === 0 || table.indexOf('=') === 0) ? table.substr(1) : table).toLowerCase();

    $.ajax({
      type: 'GET',
      url: '/snd_xplore.do?action=getTableHierarchy' +
            '&amp;table=' + table +
            '&amp;search_labels=' + (search_labels ? '1' : '0'),
      dataType: 'json'
    }).
    done(function (data) {
      var result = data.result;
      var $target = $('#table_hierarchy_result').empty();

      if (data.$success === false) {
        $target.append('&lt;div class="alert alert-danger"&gt;&lt;strong&gt;' + data.$error + '&lt;/strong&gt;&lt;/div&gt;');
        loading(false);
        return;
      }

      function isMatch(text) {
        return text ? text.toLowerCase().indexOf(api.term) &gt; -1 : false;
      }

      function sortByLabel(dbo) {
        dbo.sort(function (a, b) {
          if (a.label &gt; b.label) return 1;
          if (b.label &gt; a.label) return -1;
          return 0;
        });
      }

      function generateHtml(dbo) {
        var match_label = isMatch(dbo.label),
            match_name  = isMatch(dbo.name),
            text_class = match_label || match_name ? 'primary' : 'muted',
            anchor,
            html;

        if (api.term != '*') {
          html = '&lt;li class="text-' + text_class + '"&gt;';
          if (match_label) {
            html += dbo.label.replace(new RegExp('(' + api.term + ')', 'i'), '&lt;span class="bg-success"&gt;$1&lt;/span&gt;');
          } else {
            html += dbo.label;
          }
        } else {
          html = '&lt;li&gt;' + dbo.label;
        }

        if (match_name) {
          anchor = dbo.name.replace(api.term, '&lt;span class="bg-success"&gt;' + api.term + '&lt;/span&gt;');
        } else {
          anchor = dbo.name;
        }
        html += ' [&lt;a href="#show" data-show="=' + dbo.name + '" class="text-' + text_class + '"&gt;' + anchor + '&lt;/a&gt;]';

        html += ' &lt;a href="' + dbo.name + '_list.do" target="_blank" title="Open list"&gt;&lt;i class="glyphicon glyphicon-list-alt" /&gt;&lt;/a&gt;';
        html += ' &lt;a href="' + dbo.name + '.do" target="_blank" title="Open form"&gt;&lt;i class="glyphicon glyphicon-open-file" /&gt;&lt;/a&gt;';
        html += ' &lt;a href="sys_db_object.do?sys_id=' + dbo.sys_id + '" target="_blank" title="Open table definition"&gt;&lt;i class="glyphicon glyphicon-cog" /&gt;&lt;/a&gt;';
        if (dbo.children.length) {
          html += '&lt;ul&gt;';
          sortByLabel(dbo.children);
          $.each(dbo.children, function (i, childDbo) {
            html += generateHtml(childDbo);
          });
          html += '&lt;/ul&gt;';
        }
        html += '&lt;/li&gt;';
        return html;
      }

      if (result.length) {
        sortByLabel(result);
        $.each(result, function (i, dbo) {
          $target.append('&lt;ul&gt;' + generateHtml(dbo) + '&lt;/ul&gt;');
        });
      } else {
        $target.append('&lt;div class="alert alert-danger"&gt;&lt;strong&gt;No table information found.&lt;/strong&gt;&lt;/div&gt;');
      }
      loading(false);
    }).
    fail(function () {
      loading(false);
      snd_log('Error: getTableHierarchy failed.');
    });
  }

  function loading(b) {
    if (b) {
      $('#table_hierarchy_loading').show();
      $('#table_hierarchy_result_container').fadeOut();
    } else {
      $('#table_hierarchy_result_container').fadeIn();
      $('#table_hierarchy_loading').hide();
    }
  }
  api.getTableHierarchy = getTableHierarchy;

  return api;

})();


/*************************************
           SCRIPT SEARCH
**************************************/

var snd_script_search_util = (function () {

  var api = {};
  var $list = $('#script_pane_list');
  var $script_pane_404 = $('#script_pane_404');

  function search(value) {
    var elements,
        match,
        nomatch;

    if(value) {

      value = value.toUpperCase();
      elements = $list.find('span.script-name');

      match = elements.filter(function (i, el) {
        return (el.textContent || el.innerText || "").toUpperCase().indexOf(value)&gt;=0;
      });
      match.parent().show();

      nomatch = elements.filter(function (i, el) {
        return (el.textContent || el.innerText || "").toUpperCase().indexOf(value)==-1;
      });
      nomatch.parent().hide();

      if (!match.length) {
        $script_pane_404.show();
      }

    } else {
      $list.find("li").show();
    }
  }

  function loading(b) {
    $('#script_pane_loading').toggle(b);
  }

  api.search = (function () {
    var requested = false;
    var filter;
    return function (value) {
      filter = value;
      if (requested) return;
      loading(true);
      $script_pane_404.hide();
      if (!api.records) {
        requested = true;
        api.loadAll().done(function () {
          requested = false;
          search(filter);
          loading(false);
        });
      } else {
        search(filter);
        loading(false);
      }
    };
  })();

  api.addScript = function (sys_id, replace) {
    loading(true);
    $.ajax({
      type: 'GET',
      url: '/snd_xplore.do?action=getScript&amp;sys_id=' + sys_id,
      dataType: 'json'
    }).
    done(function (data) {
      var result = data.result;
      var old = snd_xplore_editor.getValue();

      if (old) {
        if (replace != '1') {
          if (old.length &gt; 0) old += '\n\n';
        } else if(!confirm('Warning! This will replace your code.')) {
          return;
        } else {
          old = '';
        }
      }

      snd_xplore_editor.setValue(
        old +
        '/*************************************' + '\n' +
        '  ' + result.api_name + '\n' +
        ' *************************************/' + '\n' +
        result.script);
      loading(false);

      // close the pane
      snd_xplore_ui.side_panes.closeAll();
    }).
    fail(function () {
      snd_log('Error: snd_script_search_util.addScript failed.');
      loading(false);
    });
  };

  api.loadAll = function () {
    loading(true);
    return $.ajax({
      type: 'GET',
      url: '/snd_xplore.do?action=getScripts',
      dataType: 'json'
    }).
    done(function (data) {
      api.records = data.result;
      $list.empty();
      $.each(api.records, function (i, item) {
        var scope = item.$sys_scope == 'Global' ? '' : ' (' + item.$sys_scope + ')';
        $list.append($('&lt;li&gt;' +
          '&lt;span class="script-link script-name" data-sys-id="' + item.sys_id + '"&gt;' +
          item.name + scope + '&lt;/span&gt; ' +
          '&lt;span class="script-link script-replace pull-right" data-sys-id="' + item.sys_id + '" ' +
          'data-replace="1"&gt;' +
          'replace&lt;/span&gt;' +
          '&lt;/li&gt;'));
      });
      loading(false);
    }).
    fail(function () {
      snd_log('Error: snd_script_search_util.loadAll failed.');
      loading(false);
    });
  };

  // handle script search
  $('#script_pane_search')
  .change(function () {
    snd_script_search_util.search($(this).val());
    return false;
  })
  .keyup(function () {
    $(this).change();
  });

  $('#script_pane_list').on('click', 'span.script-link', function (e) {
    var $anchor = $(this);
    if (!$anchor.attr('data-sys-id')) {
      snd_log('Error: script link does not have sys_id attribute');
    } else {
      snd_script_search_util.addScript($anchor.attr('data-sys-id'), $anchor.attr('data-replace'));
    }
  });

  $('#side_controls a[data-pane="script_pane"]').one('click', function () {
    api.loadAll();
  });

  $('#scripts_refresh').click(function () {
    $list.empty();
    api.loadAll().done(function () {
      var search = $('#script_pane_search').val();
      if (search) {
        snd_script_search_util.search(search);
      }
    });    
  });

  return api;
})();


/*************************************
            SIDE PANES
**************************************/

(function () {

  window.snd_xplore_ui.side_panes = {
    closeAll: function () {
      $('.side_pane').fadeOut(400);
      $('#side_controls li a[data-pane]').removeClass('active');
    }
  };

  // setup the side pane controls
  $('#side_controls li').on('click', 'a', function () {
    var $target = $(this);
    if (!$target.attr('data-pane')) return;

    $('#side_controls li a').each(function () {
      var $this = $(this);
      var pane = $this.attr('data-pane');
      if (!pane) return;
      var $pane = $('#' + pane);

      if (this === $target.get(0)) {
        var workbenchLeft = $('#side_controls').outerWidth();
        if (!$pane.is(':visible')) {
          //workbenchLeft += $pane.outerWidth();
          //$('#workbench').animate({left: workbenchLeft}, 400, function () {
            $pane.fadeIn(400);
            //resizeOutputContent();
          //});
        } else {
          $pane.fadeOut(400);//, function () {
            //$('#workbench').animate({left: workbenchLeft}, 400, function () {
              //$('#workbench').css('left', '');
              //resizeOutputContent()
            //});
          //});
        }
        $this.toggleClass('active');
      } else {
        $this.removeClass('active');
        $pane.hide();
      }
    });
  });

  // auto close the data panes when clicked outside
  $(document).click(function(event) {
    if(!$(event.target).closest('.side_pane').length &amp;&amp;
        !$(event.target).closest('#side_controls').length &amp;&amp;
        !$(event.target).hasClass('.side_pane')) {
      snd_xplore_ui.side_panes.closeAll();
    }
  });

})();


/*************************************
              INIT
**************************************/

$(function () {

  // update the selector for the frames
  (function () {
    var frames,
        target,
        name,
        i;
    if (window.opener) {
      frames = window.opener.frames;
      target = $('#target');
      target.append('&lt;option value="opener"&gt;Opener&lt;/option&gt;');
      for (i = 0; frames.length &gt; i; i++) {
        try {
          name = frames[i].name;
        } catch (e) {} // ignore cross-origin frame SecurityErrors
        if (!name) continue;
        target.append('&lt;option value="frame_' + i + '"&gt;Opener: ' + name + '&lt;/option&gt;');
      }
    }
  })();

  // Populate the scope selector
  $(function () {
    var $scope = $('#scope');
    $scope.empty();
    $scope.append($('&lt;option class="text-italic text-muted"&gt;Loading&lt;/option&gt;'));

    $.ajax({
      type: 'GET',
      url: '/snd_xplore.do?action=getScopes',
      dataType: 'json'
    }).
    done(function (data) {
        $scope.empty();
        $.each(data.result, function (i, item) {
          $scope.append($('&lt;option value="' + item.scope + '"&gt;' + item.name + '&lt;/option&gt;'));
        });
    }).
    fail(function () {
      snd_log('Error: populateScopes failed.');
    });
  });

  window.snd_xplore_editor = CodeMirror.fromTextArea(document.getElementById("snd_xplore"), {
    lineNumbers: true,
    lineWrapping: true,
    tabSize: 2,
    indentUnit: 2,
    smartIndent: true,
    matchBrackets: true,
    mode: 'javascript'
  });

  var sxr = snd_xplore_reporter;
  sxr.initialize();
  sxr.addEvent('start', snd_xplore_util.loading);
  sxr.addEvent('done', snd_xplore_util.loadingComplete);
  sxr.addEvent('click.interactive-result', snd_xplore_util.execute);
  sxr.addEvent('click.breadcrumb', snd_xplore_util.execute);


  // handle the run button clicking
  $('#xplore_btn').click(function () {
    snd_xplore_util.executeNew();
  });

  // handle the cancel button clicking
  $('#cancel_btn').click(function () {
    snd_xplore_util.cancel();
  });

  // Setup property toggles
  $('#setting_quotes,#show_props,#show_strings').
    bootstrapToggle({
      on: 'Show',
      off: 'Hide',
      size: 'mini',
      onstyle: 'success',
      offstyle: 'danger',
      width: 75
    });
  $('#show_html_messages').
    bootstrapToggle({
      on: 'HTML',
      off: 'Text',
      onstyle: 'success',
      offstyle: 'warning',
      size: 'mini',
      width: 75
    });
  $('#wrap_output_pre').
    bootstrapToggle({
      on: 'Wrap',
      off: 'No wrap',
      onstyle: 'success',
      offstyle: 'warning',
      size: 'mini',
      width: 75
    }).change(function () {
      if (this.checked) {
        $('#script_output').addClass('wrap-pre');
      } else {
        $('#script_output').removeClass('wrap-pre');
      }
    });
  $('#fix_gslog').
    bootstrapToggle({
      on: 'Replace',
      off: 'Ignore',
      onstyle: 'success',
      offstyle: 'warning',
      size: 'mini',
      width: 75
    });

  // set default to wrapped
  if ($('#wrap_output_pre:checked')) {
    $('#script_output').addClass('wrap-pre');
  }

  // regex input trigger
  $('#regex,#regex_options,#regex_input').on('keyup', function () {
    delay('testRegex', snd_xplore_regex_util.run, 700);
  });

  // table input trigger
  $('#table_hierarchy_form').on('submit', function (e) {
    e.preventDefault();

    var table = $('#table_hierarchy_table').blur().val();
    var search_labels = $('#table_hierarchy_table_do_label').is(':checked');
    //if (!table) return;
    //delay('tableHierarchy', function () {
      snd_xplore_table_util.getTableHierarchy(table, search_labels);
    //}, 700);
  });

  // table hierarchy link trigger
  $('#table_hierarchy_result').on('click', 'a', function (e) {
    var $this = $(this);
    var table;
    table = $this.attr('data-show');
    if (table) {
      e.preventDefault();
      $('#table_hierarchy_table').val(table);
      snd_xplore_table_util.getTableHierarchy(table);
    }
  });



  // setup the editor toggle button
  $('#editor_toggle').on('click', function () {
    snd_xplore_util.toggleEditor();
  });

  // Execute the script again when the breadcrumb is reset
  $('#clearBreadcrumb').on('click', function () {
    snd_xplore_util.executeNew();
  });

  // execute when Ctrl + Enter is used
  $('#editor').keydown(function (event) {
    if (event.ctrlKey) {
      if (event.keyCode == 10 || event.keyCode == 13) {
        event.preventDefault();
        snd_xplore_util.executeNew();
      }
    }
  });

  // Dirty form detection
  $(window).bind('beforeunload', function() {
    var code = snd_xplore_util.getCode();
    if (code.length) {
      return 'Do you want to leave?';
    }
  });

  var resizeUtil = {
    calcEditorRatio: function (store) {
      var ratio = $('#editor').width() / $('#workbench').width();
      if (store) {
        resizeUtil.editorRatio = ratio;
      }
      return ratio;
    },
    editorRatio: 0,

    calcWorkbenchWidth: function (store) {
      var width = $('#workbench').width();
      if (store) {
        resizeUtil.workbenchWidth = width;
      }
      return width;
    },
    workbenchWidth: 0
  };
  resizeUtil.calcEditorRatio(true);
  resizeUtil.calcWorkbenchWidth(true);

  // make the code mirror editor resizable
  $('#editor').resizable({
    containment: 'parent',
    handles: {'e': '.ui-resizable-e'},
    minWidth: 100,
    resize: function (e, ui) {
       $('#output').css('left', ui.size.width + 'px');
       resizeUtil.calcEditorRatio(true);
    }
  });

  // set the width of the editor and output so they are pixels instead of percents
  // this is so the editor looks right when the side-pane is shown/hidden
  (function () {
    var $output = $('#output');
    var $editor = $('#editor');
    var editorWidth = $editor.outerWidth();
    $output.css('left', editorWidth);
    $editor.css('width', editorWidth);
  })();

  // Setup the onChange handler for hiding scope select
  // when the target is not the client.
  $('#target').on('change', function () {
    if (this.value == 'server') {
      $('#scope').fadeIn();
    } else {
      $('#scope').fadeOut();
    }
  });

  // make tabs clickable
  $('#output_tabs a').click(function (e) {
    e.preventDefault();
    $(this).tab('show');
  });

  $('#user_data_format_btn').click(function () {
    snd_xplore_util.formatString();
  });

  var $output_tabs_pane = $('#output_tabs_pane');
  var active_log_frame = '';
  var node_log_url = '/ui_page_process.do?name=log_file_browser&amp;max_rows=2000';

  $('#system_log_tab').one('click', function () {
    $('#system_log_frame').attr('src', '/syslog_list.do?sysparm_query=sys_created_onONToday%40javascript%3Ags.daysAgoStart(0)%40javascript%3Ags.daysAgoEnd(0)');
  }).click(function () {
    active_log_frame = 'system';
  });
  $('#node_log_tab').click(function () {
    var new_url;
    active_log_frame = 'node';
    new_url = $('#node_log_url').val();
    if (node_log_url !== new_url) {
      node_log_url = new_url || '/ui_page_process.do?name=log_file_browser&amp;max_rows=2000';
      $('#node_log_frame').attr('src', node_log_url);
    }
  });
  $('#log_reset').click(function () {
    var $frame = $('#' + active_log_frame + '_log_frame');
    if ($frame.length) {
      $frame.attr('src', $frame.attr('src'));
    }
    $('#' + active_log_frame + '_log_tab').click(); // select the tab
  });

  // facilitate system log frame resizing
  function resizeLogPane() {
    var $output_content = $('#output_content');
    var $output_tabs = $('#output_tabs');
    var h = $output_content.height() - $output_tabs.height() - 10;
    $('#system_log_frame,#node_log_frame').css('height', h);
  }
  resizeLogPane();

  // update the output pane so the tabs can stack and be seen
  function resizeOutputContent() {
    $output_tabs_pane.css('top', $('#output_tabs').outerHeight() + 'px');
  }
  resizeOutputContent();

  function resizeUserData() {
    var $user_data_pane = $('#user_data_pane');
    var user_data_input = $('#user_data_input').get(0);
    var remaining_space;

    user_data_input.style.height = '';
    remaining_space = $output_tabs_pane.height() - $user_data_pane.height();

    if (remaining_space &gt; 10) {
      user_data_input.style.height = (remaining_space - 10) + 'px';
    }
  }
  resizeUserData();

  // resize the view when the window resizes
  $(window).resize(function () {
    // need to see if we are changing the window size or just the editor width
    // we do this by checking if the workbench width has changed
    if (resizeUtil.workbenchWidth != resizeUtil.calcWorkbenchWidth(true)) {
      var newWidth = $('#workbench').width() * resizeUtil.editorRatio;
      var $editor = $('#editor');
      $editor.css('width', newWidth);
      if ($editor.is(':visible')) {
        $('#output').css('left', newWidth);
      }
    }

    resizeLogPane();
    resizeOutputContent();
    resizeUserData();
  });


  snd_xplore_editor.focus();
  $('#window_loader').removeClass('active');
});]]&gt;&lt;/script&gt;&lt;script_name/&gt;&lt;sys_class_name&gt;sys_ui_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;james@thewhitespace.io&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2016-02-07 20:06:00&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;true&lt;/sys_customer_update&gt;&lt;sys_id&gt;2d6d96b70f5d528094f3c09ce1050e85&lt;/sys_id&gt;&lt;sys_mod_count&gt;154&lt;/sys_mod_count&gt;&lt;sys_name&gt;snd_xplore_ui&lt;/sys_name&gt;&lt;sys_package display_value="[ws] Xplore: Developer Toolkit" source="0f6ab99a0f36060094f3c09ce1050ee8"&gt;0f6ab99a0f36060094f3c09ce1050ee8&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="[ws] Xplore: Developer Toolkit"&gt;0f6ab99a0f36060094f3c09ce1050ee8&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_script_2d6d96b70f5d528094f3c09ce1050e85&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;james@thewhitespace.io&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-02-04 23:00:31&lt;/sys_updated_on&gt;&lt;use_scoped_format&gt;false&lt;/use_scoped_format&gt;&lt;/sys_ui_script&gt;&lt;/record_update&gt;</payload>
<payload_hash/>
<remote_update_set display_value="[ws] Xplore: Developer Toolkit - 4.5">c1bde016dbdc8e10b0fa3fd3e296194c</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>kyle.stinar@continuant.com</sys_created_by>
<sys_created_on>2024-02-13 17:49:24</sys_created_on>
<sys_id>55bde016dbdc8e10b0fa3fd3e2961950</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1628c66dfd80000000</sys_recorded_at>
<sys_updated_by>kyle.stinar@continuant.com</sys_updated_by>
<sys_updated_on>2024-02-13 17:49:24</sys_updated_on>
<table/>
<target_name>snd_xplore_ui</target_name>
<type>UI Script</type>
<update_domain>global</update_domain>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_ui_context_menu_c53e003cdb378300b1307b5b8c9619ec</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_ui_context_menu"&gt;&lt;sys_ui_context_menu action="INSERT_OR_UPDATE"&gt;&lt;action_script&gt;&lt;![CDATA[snd_xplore_list.openRecord();]]&gt;&lt;/action_script&gt;&lt;active&gt;true&lt;/active&gt;&lt;comments/&gt;&lt;condition&gt;gs.hasRole('admin')&lt;/condition&gt;&lt;do_not_cache&gt;false&lt;/do_not_cache&gt;&lt;dynamic_actions_script&gt;&lt;![CDATA[/** 
 * This server-side script is used to dynamically create actions for the context menu, such as the list of available templates 
 * 
 * The following variables are available to the script: 
 *    'g_tableName' the name of the current table 
 *    'g_listId' the id of the list we are building the context menu for 
 *    'g_itemName' the name of the UI Context Menu item we are building 
 *    'g_itemOrder' the order defined in the UI Context Menu item we are building 
 * 
 * Add items to the context menu by calling: 
 *    g_contextMenu.addAction(item_id, label, script_string, order); 
 */ 
]]&gt;&lt;/dynamic_actions_script&gt;&lt;menu&gt;list_row&lt;/menu&gt;&lt;name&gt;Open Record in Xplore&lt;/name&gt;&lt;on_show_script&gt;&lt;![CDATA[/**
 * This client-side script is used to dynamically change the context menu before it is displayed.
 * It is called before showing the context menu if the Run onShow script flag is checked.
 *
 * The following variables are available to the script:
 *    'g_menu' the context menu that is about to be shown
 *    'g_item' the current context menu item
 *    'g_list' the GlideList2 that the script is running against (only valid for List context menus)
 *    'g_fieldName' the name of the field that the context menu is running against (only valid for List context menus)
 *    'g_fieldLabel' the label of the field that the context menu is running against (only valid for List context menus)
 *    'g_sysId' the sys_id of the row or form that the script is running against
 */
 
]]&gt;&lt;/on_show_script&gt;&lt;order&gt;116000&lt;/order&gt;&lt;parent/&gt;&lt;run_on_show_script&gt;false&lt;/run_on_show_script&gt;&lt;sys_class_name&gt;sys_ui_context_menu&lt;/sys_class_name&gt;&lt;sys_created_by&gt;james@thewhitespace.io&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-01-18 21:06:47&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;true&lt;/sys_customer_update&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;c53e003cdb378300b1307b5b8c9619ec&lt;/sys_id&gt;&lt;sys_mod_count&gt;4&lt;/sys_mod_count&gt;&lt;sys_name&gt;Open Record in Xplore&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="[ws] Xplore: Developer Toolkit" source="0f6ab99a0f36060094f3c09ce1050ee8"&gt;0f6ab99a0f36060094f3c09ce1050ee8&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="[ws] Xplore: Developer Toolkit"&gt;0f6ab99a0f36060094f3c09ce1050ee8&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_context_menu_c53e003cdb378300b1307b5b8c9619ec&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;james@thewhitespace.io&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-01-18 21:22:33&lt;/sys_updated_on&gt;&lt;table&gt;global&lt;/table&gt;&lt;track_selected&gt;false&lt;/track_selected&gt;&lt;type&gt;action&lt;/type&gt;&lt;/sys_ui_context_menu&gt;&lt;/record_update&gt;</payload>
<payload_hash/>
<remote_update_set display_value="[ws] Xplore: Developer Toolkit - 4.5">c1bde016dbdc8e10b0fa3fd3e296194c</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>kyle.stinar@continuant.com</sys_created_by>
<sys_created_on>2024-02-13 17:49:24</sys_created_on>
<sys_id>59bde016dbdc8e10b0fa3fd3e296194f</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1628c66dfd80000000</sys_recorded_at>
<sys_updated_by>kyle.stinar@continuant.com</sys_updated_by>
<sys_updated_on>2024-02-13 17:49:24</sys_updated_on>
<table>global</table>
<target_name>Open Record in Xplore</target_name>
<type>Context Menu</type>
<update_domain>global</update_domain>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_properties_category_m2m_8101585edb08d700b1307b5b8c96193b</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties_category_m2m"><sys_properties_category_m2m action="INSERT_OR_UPDATE"><category display_value="Xplore Settings">439d0cdadb08d700b1307b5b8c9619a2</category><order>100</order><property display_value="snd_xplore.production_access" name="snd_xplore.production_access">28f0585edb08d700b1307b5b8c961939</property><sys_class_name>sys_properties_category_m2m</sys_class_name><sys_created_by>james@thewhitespace.io</sys_created_by><sys_created_on>2018-02-04 23:25:40</sys_created_on><sys_customer_update>true</sys_customer_update><sys_id>8101585edb08d700b1307b5b8c96193b</sys_id><sys_mod_count>0</sys_mod_count><sys_name>snd_xplore.production_access.Xplore Settings</sys_name><sys_package display_value="[ws] Xplore: Developer Toolkit" source="0f6ab99a0f36060094f3c09ce1050ee8">0f6ab99a0f36060094f3c09ce1050ee8</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="[ws] Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</sys_scope><sys_update_name>sys_properties_category_m2m_8101585edb08d700b1307b5b8c96193b</sys_update_name><sys_updated_by>james@thewhitespace.io</sys_updated_by><sys_updated_on>2018-02-04 23:25:40</sys_updated_on></sys_properties_category_m2m></record_update>]]></payload>
<payload_hash/>
<remote_update_set display_value="[ws] Xplore: Developer Toolkit - 4.5">c1bde016dbdc8e10b0fa3fd3e296194c</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>kyle.stinar@continuant.com</sys_created_by>
<sys_created_on>2024-02-13 17:49:24</sys_created_on>
<sys_id>5dbde016dbdc8e10b0fa3fd3e296194e</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1628c66dfd80000000</sys_recorded_at>
<sys_updated_by>kyle.stinar@continuant.com</sys_updated_by>
<sys_updated_on>2024-02-13 17:49:24</sys_updated_on>
<table/>
<target_name>snd_xplore.production_access.Xplore Settings</target_name>
<type>Category Property</type>
<update_domain>global</update_domain>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_app_0f6ab99a0f36060094f3c09ce1050ee8</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_app"><sys_app action="INSERT_OR_UPDATE"><active>true</active><enforce_license>log</enforce_license><js_level>traditional</js_level><licensable>true</licensable><logo/><menu display_value="[ws] Xplore: Developer Toolkit">4eb000280f2a020094f3c09ce1050e23</menu><name>[ws] Xplore: Developer Toolkit</name><private>false</private><restrict_table_access>false</restrict_table_access><runtime_access_tracking/><scope>global</scope><scoped_administration>false</scoped_administration><short_description>A toolkit for every ServiceNow developer. Find more at http://thewhitespace.io</short_description><source>0f6ab99a0f36060094f3c09ce1050ee8</source><store_correlation_id/><store_url/><sys_class_name>sys_app</sys_class_name><sys_code/><sys_created_by>james@snd</sys_created_by><sys_created_on>2015-10-01 19:03:06</sys_created_on><sys_id>0f6ab99a0f36060094f3c09ce1050ee8</sys_id><sys_mod_count>28</sys_mod_count><sys_updated_by>james@thewhitespace.io</sys_updated_by><sys_updated_on>2018-02-04 22:45:05</sys_updated_on><template/><trackable>true</trackable><user_role display_value="admin" name="admin">2831a114c611228501d4ea6c309d626d</user_role><vendor/><vendor_prefix/><version>4.5</version></sys_app></record_update>]]></payload>
<payload_hash/>
<remote_update_set display_value="[ws] Xplore: Developer Toolkit - 4.5">c1bde016dbdc8e10b0fa3fd3e296194c</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>kyle.stinar@continuant.com</sys_created_by>
<sys_created_on>2024-02-13 17:49:24</sys_created_on>
<sys_id>81bde016dbdc8e10b0fa3fd3e296194d</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1628c66dfd80000000</sys_recorded_at>
<sys_updated_by>kyle.stinar@continuant.com</sys_updated_by>
<sys_updated_on>2024-02-13 17:49:24</sys_updated_on>
<table/>
<target_name>[ws] Xplore: Developer Toolkit</target_name>
<type>Custom Application</type>
<update_domain>global</update_domain>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_ui_macro_e768ef690f4c524094f3c09ce1050e60</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ui_macro"&gt;&lt;sys_ui_macro action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;category&gt;general&lt;/category&gt;&lt;description/&gt;&lt;media_type/&gt;&lt;name&gt;snd_xplore_main&lt;/name&gt;&lt;scoped_name/&gt;&lt;sys_class_name&gt;sys_ui_macro&lt;/sys_class_name&gt;&lt;sys_created_by&gt;james@thewhitespace.io&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2015-11-30 22:27:04&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;true&lt;/sys_customer_update&gt;&lt;sys_id&gt;e768ef690f4c524094f3c09ce1050e60&lt;/sys_id&gt;&lt;sys_mod_count&gt;309&lt;/sys_mod_count&gt;&lt;sys_name&gt;snd_xplore_main&lt;/sys_name&gt;&lt;sys_package display_value="[ws] Xplore: Developer Toolkit" source="0f6ab99a0f36060094f3c09ce1050ee8"&gt;0f6ab99a0f36060094f3c09ce1050ee8&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="[ws] Xplore: Developer Toolkit"&gt;0f6ab99a0f36060094f3c09ce1050ee8&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_macro_e768ef690f4c524094f3c09ce1050e60&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;james@thewhitespace.io&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-02-04 22:57:25&lt;/sys_updated_on&gt;&lt;xml&gt;&lt;![CDATA[&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null"&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8" /&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge" /&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1" /&gt;

    &lt;title&gt;Xplore&lt;/title&gt;

    &lt;!-- Bootstrap --&gt;
    &lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" /&gt;

    &lt;!-- Bootstrap Toggle --&gt;
    &lt;link href="https://gitcdn.github.io/bootstrap-toggle/2.2.0/css/bootstrap-toggle.min.css" rel="stylesheet" /&gt;

    &lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;
    &lt;!-- WARNING: Respond.js doesnt work if you view the page via file:// --&gt;
    &lt;!--[if lt IE 9]&gt;
      &lt;script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"&gt;&lt;/script&gt;
      &lt;script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"&gt;&lt;/script&gt;
    &lt;![endif]--&gt;

    &lt;!-- CodeMirror --&gt;
    &lt;link rel="stylesheet" href="/codemirror.css" /&gt;

    &lt;!-- snd_xplore --&gt;
    &lt;link href="/efd550a80f2a020094f3c09ce1050ecf.cssdbx" rel="stylesheet" /&gt;
  &lt;/head&gt;
  &lt;body&gt;

    &lt;div id="window_loader" class="page_loader active"&gt;
      &lt;div class="loading"&gt;
        &lt;i class="glyphicon glyphicon-refresh spin"&gt;&lt;/i&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;nav class="navbar navbar-default navbar-fixed-top"&gt;
      &lt;a class="navbar-header" href="http://thewhitespace.io" target="_blank"&gt;
         &lt;img class="navbar-brand" src="/ws_logo_Xplore_48.pngx" width="48" height="48"
              title="Xplore (${gs.getProperty('glide.buildtag')})"
              alt="Xplore logo" style="padding: 2px; margin-left: 2px; height: auto" /&gt;
         &lt;span class="navbar-brand" style="padding: 15px 8px 15px 4px"&gt;
          &lt;span class="text-primary"&gt;Xplore&lt;/span&gt; &lt;sub&gt;${snd_Xplore.getVersion()}&lt;/sub&gt;&lt;/span&gt;
      &lt;/a&gt;
      &lt;div id="navbar"&gt;
        &lt;ul class="nav navbar-nav"&gt;
          &lt;li&gt;
            &lt;p class="navbar-control"&gt;
              &lt;select id="target" class="form-control"&gt;
                &lt;option value="server"&gt;Server&lt;/option&gt;
                &lt;option value="client"&gt;Client&lt;/option&gt;
              &lt;/select&gt;
            &lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p class="navbar-control"&gt;
              &lt;select id="scope" class="form-control"&gt;
                &lt;option&gt;Loading&lt;/option&gt;
              &lt;/select&gt;
            &lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;button id="xplore_btn" class="btn btn-success navbar-control"
              title="Ctrl + Enter"&gt;Run&lt;/button&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;button id="cancel_btn" class="btn btn-danger navbar-control"
              title="Cancel Transaction" style="display:none"&gt;Cancel&lt;/button&gt;
          &lt;/li&gt;
          &lt;li id="timer" class="navbar-brand"&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/div&gt;
    &lt;/nav&gt;

    &lt;div id="wrapper"&gt;

      &lt;div id="side_controls"&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;a href="javascript:void(0);" title="New"
              onclick="window.opener ? window.opener.open(window.location.href, '_blank') : window.open(window.location.href, '_blank');"&gt;
              &lt;i class="glyphicon glyphicon-new-window"&gt;&lt;/i&gt;
            &lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href="javascript:void(0)" title="Toggle Editor" id="editor_toggle" class="active"&gt;
            &lt;i class="glyphicon glyphicon-console"&gt;&lt;/i&gt;&lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href="javascript:void(0);" title="Settings" data-pane="settings_pane"&gt;
            &lt;i class="glyphicon glyphicon-cog"&gt;&lt;/i&gt;&lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href="javascript:void(0)" title="Open Script" data-pane="script_pane"&gt;
              &lt;i class="glyphicon glyphicon-paste"&gt;&lt;/i&gt;&lt;/a&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/div&gt;

      &lt;div id="settings_pane" class="side_pane" style="display: none;"&gt;
        &lt;p class="lead"&gt;Settings&lt;/p&gt;
        &lt;div class="checkbox"&gt;
          &lt;input type="checkbox" id="setting_quotes" checked="checked" /&gt;
          &lt;strong&gt;Quotes*&lt;/strong&gt;
          &lt;p&gt;By default, the Xplore Pretty Printer adds double quotes around
          strings. Use this option to turn them off (useful for HTML/JSON strings).&lt;/p&gt;
        &lt;/div&gt;
        &lt;div class="checkbox"&gt;
          &lt;input type="checkbox" id="show_props" checked="checked" /&gt;
          &lt;strong&gt;Show Object Properties*&lt;/strong&gt;
          &lt;p&gt;Xplore will display the properties of the resulting objects of
            any script you run. Turn off if you only care about the object
            itself.&lt;/p&gt;
        &lt;/div&gt;
        &lt;div class="checkbox"&gt;
          &lt;input type="checkbox" id="show_strings" checked="checked" /&gt;
          &lt;strong&gt;Show String Values*&lt;/strong&gt;
          &lt;p&gt;Xplore will attempt to display the string values of the object and
            its properties. Turn off if you encounter access errors or you don't
            want to see strings. When off, all string values are shown as
            &amp;quot;&lt;span class="text-danger"&gt;[user ignored]&lt;/span&gt;&amp;quot;.&lt;/p&gt;
        &lt;/div&gt;
        &lt;div class="checkbox"&gt;
          &lt;input type="checkbox" id="show_html_messages" checked="checked" /&gt;
          &lt;strong&gt;HTML Message Format*&lt;/strong&gt;
          &lt;p&gt;Output messages are shown as they are generated which means if they
            contain something like an anchor tag the anchor will work. Turn off
            if you want to see the raw string.&lt;/p&gt;
        &lt;/div&gt;
        &lt;div class="checkbox"&gt;
          &lt;input type="checkbox" id="wrap_output_pre" checked="checked" /&gt;
          &lt;strong&gt;Wrap Long Strings&lt;/strong&gt;
          &lt;p&gt;Wrapping of long strings, i.e. functions, means you don't have to
            scroll right in the output pane to read them. If you'd rather see
            each line as-is then change this setting.&lt;/p&gt;
        &lt;/div&gt;
        &lt;div class="checkbox"&gt;
          &lt;input type="checkbox" id="fix_gslog" checked="checked" /&gt;
          &lt;strong&gt;Fix Logs&lt;/strong&gt;
          &lt;p&gt;Replace calls to gs.print, gs.log, gs.debug, gs.info, gs.warn and gs.error
             with internal functions so that we can capture the logs. NOTE: This
             only applies to the code in Xplore, not business rules or script includes.&lt;/p&gt;
        &lt;/div&gt;
        &lt;p class="small"&gt;*New values will apply to the next script being run.&lt;/p&gt;
      &lt;/div&gt;

      &lt;div id="script_pane" class="side_pane" style="display: none;"&gt;
        &lt;div id="script_pane_loading" class="pull-right" style="display:none;"&gt;
          &lt;i class="glyphicon glyphicon-refresh spin"&gt;&lt;/i&gt;
        &lt;/div&gt;
        &lt;button class="btn btn-link btn-sm pull-right" id="scripts_refresh"&gt;Refresh&lt;/button&gt;
        &lt;p class="lead"&gt;Scripts&lt;/p&gt;
        &lt;p&gt;Easily append script includes to the editor window.&lt;/p&gt;
        &lt;input type="text" class="form-control" id="script_pane_search"
          placeholder="Search..." /&gt;

        &lt;p class="alert alert-warning" id="script_pane_404" style="display: none"&gt;
          Nothing found.
        &lt;/p&gt;
        &lt;ul id="script_pane_list"&gt;&lt;/ul&gt;
      &lt;/div&gt;

      &lt;div id="workbench"&gt;

        &lt;div id="editor"&gt;
          &lt;textarea class="form-control" id="snd_xplore" rows="10"&gt;&lt;/textarea&gt;
          &lt;div class="ui-resizable-handle ui-resizable-e"&gt;&lt;/div&gt;
        &lt;/div&gt;

        &lt;div id="output"&gt;

          &lt;div id="output_loader" class="page_loader"&gt;
            &lt;div class="loading"&gt;
              &lt;i class="glyphicon glyphicon-refresh spin"&gt;&lt;/i&gt;
            &lt;/div&gt;
          &lt;/div&gt;

          &lt;div id="output_content"&gt;

            &lt;ul class="nav nav-tabs" role="tablist" id="output_tabs"&gt;
              &lt;li role="presentation" class="active"&gt;
                &lt;a href="#info_pane" aria-controls="info_pane" id="info_pane_tab"
                  role="tab" data-toggle="tab"
                  title="Some stuff about Xplore"&gt;
                  &lt;i class="glyphicon glyphicon-info-sign"&gt;&lt;/i&gt;
                &lt;/a&gt;
              &lt;/li&gt;
              &lt;li role="presentation"&gt;
                &lt;a href="#script_output" aria-controls="script_output"
                  id="script_output_tab" role="tab" data-toggle="tab"
                  title="View the output of your script"&gt;Output&lt;/a&gt;
              &lt;/li&gt;
              &lt;li role="presentation"&gt;
                &lt;a href="#user_data_pane" aria-controls="user_data_pane"
                  id="user_data_tab" role="tab" data-toggle="tab"
                  title="Test your code with large strings"&gt;User Data&lt;/a&gt;
              &lt;/li&gt;
              &lt;li role="presentation"&gt;
                &lt;a href="#regex_pane" aria-controls="regex_pane"
                  id="regex_tab" role="tab" data-toggle="tab"
                  title="Run regular expressions in ServiceNow"&gt;Regex&lt;/a&gt;
              &lt;/li&gt;
              &lt;li role="presentation"&gt;
                &lt;a href="#table_hierarchy_pane" aria-controls="table_hierarchy_pane"
                  id="table_hierarchy_tab" role="tab" data-toggle="tab"
                  title="View the hierarchy of a table"&gt;Table Hierarchy&lt;/a&gt;
              &lt;/li&gt;
              &lt;li class="dropdown" role="presentation"&gt;
                &lt;a href="javascript:void(0)" class="dropdown-toggle"
                  data-toggle="dropdown"&gt;Logs &lt;span class="caret"&gt;&lt;/span&gt;&lt;/a&gt;
                &lt;ul class="dropdown-menu"&gt;
                  &lt;li&gt;&lt;a href="#system_log_pane" id="system_log_tab" aria-controls="system_log_pane"
                    role="tab" data-toggle="tab"&gt;System Logs&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href="#node_log_pane" id="node_log_tab" aria-controls="node_log_pane"
                    role="tab" data-toggle="tab"&gt;Node Logs&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href="javascript:void(0)" id="log_reset"&gt;Reset&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;

            &lt;div class="tab-content" id="output_tabs_pane"&gt;

              &lt;div id="info_pane" role="tabpanel" class="tab-pane fade active in"&gt;
                &lt;g:macro_invoke macro="snd_xplore_info" /&gt;
              &lt;/div&gt;

              &lt;div id="script_output" role="tabpanel" class="tab-pane fade monospace"&gt;
                &lt;ul id="breadcrumb" class="breadcrumb hidden"&gt;
                  &lt;li class="permanent"&gt;
                    &lt;a id="clearBreadcrumb" href="javascript:void(0);"&gt;Result&lt;/a&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;

                &lt;div id="message_container"&gt;
                  &lt;table class="table table-condensed" id="message_table"&gt;
                    &lt;tr&gt;
                      &lt;td&gt;
                        &lt;div class="alert alert-success"
                            style="width: 70%; margin: 40px auto;"&gt;
                          Output will be displayed here when you run a script.
                        &lt;/div&gt;
                      &lt;/td&gt;
                    &lt;/tr&gt;
                  &lt;/table&gt;
                &lt;/div&gt;

                &lt;div id="log_container" class="hidden"&gt;
                  &lt;h4 class="monospace"&gt;System Logs&lt;/h4&gt;
                  &lt;table class="table table-condensed" id="log_table"&gt;&lt;/table&gt;
                &lt;/div&gt;

                &lt;div id="result_container"&gt;
                  &lt;table class="table table-condensed" id="description_table"&gt;&lt;/table&gt;

                  &lt;div id="type_control"&gt;&lt;/div&gt;
                  &lt;table class="table table-condensed" id="results_table"&gt;&lt;/table&gt;
                &lt;/div&gt;
              &lt;/div&gt;

              &lt;div id="user_data_pane" role="tabpanel" class="tab-pane fade"&gt;

                &lt;div class="wrap row"&gt;
                  &lt;div class="col-xs-12"&gt;
                    &lt;div style="margin-bottom: 10px;"&gt;
                      &lt;h4 class="monospace"&gt;User Data&lt;/h4&gt;
                      &lt;p&gt;Easily add large strings to the variable &lt;code&gt;user_data&lt;/code&gt;.&lt;/p&gt;
                      &lt;p&gt;Choose a format to automatically parse the data for the script
                        and use the 'Format' button to prettify the data.&lt;/p&gt;
                      &lt;div class="form-inline"&gt;
                        &lt;div class="input-group input-group-sm"&gt;
                          &lt;select class="form-control" id="user_data_type_select"&gt;
                            &lt;option&gt;Plain (String)&lt;/option&gt;
                            &lt;option&gt;JSON (Object)&lt;/option&gt;
                            &lt;option&gt;XML (XMLDocument)&lt;/option&gt;
                            &lt;option&gt;XML (XMLDocument2)&lt;/option&gt;
                          &lt;/select&gt;
                          &lt;span class="input-group-btn"&gt;
                            &lt;button class="btn btn-danger" id="user_data_format_btn"&gt;Prettify&lt;/button&gt;
                          &lt;/span&gt;
                        &lt;/div&gt;
                      &lt;/div&gt;
                    &lt;/div&gt;
                    &lt;textarea id="user_data_input" class="form-control monospace"&gt;&lt;/textarea&gt;
                  &lt;/div&gt;
                &lt;/div&gt;

              &lt;/div&gt;

              &lt;div id="regex_pane" role="tabpanel" class="tab-pane fade monospace"&gt;

                &lt;div class="wrap row"&gt;
                  &lt;div class="col-xs-12"&gt;
                    &lt;div id="regex_loading" class="pull-right" style="display:none;"&gt;
                      &lt;i class="glyphicon glyphicon-refresh spin"&gt;&lt;/i&gt;
                    &lt;/div&gt;
                    &lt;h4&gt;Regular Expression&lt;/h4&gt;
                    &lt;div&gt;
                      &lt;div class="slash"&gt;/&lt;/div&gt;
                      &lt;div class="regex-options"&gt;
                        &lt;div class="slash"&gt;/&lt;/div&gt;
                        &lt;input type="text" value="g" id="regex_options" name="regex_options"
                            class="form-control" tabindex="2" /&gt;
                      &lt;/div&gt;
                      &lt;div class="regex-expression"&gt;
                        &lt;input type="text" placeholder="expression" id="regex" name="regex"
                            class="form-control" tabindex="1" /&gt;
                      &lt;/div&gt;
                    &lt;/div&gt;
                    &lt;p&gt;&lt;code&gt;user_data.match(&lt;span id="regex_code"&gt;&lt;/span&gt;)&lt;/code&gt;&lt;/p&gt;
                  &lt;/div&gt;
                  &lt;div class="col-sm-6 col-xs-12"&gt;
                    &lt;h4&gt;Test String&lt;/h4&gt;
                    &lt;div class="panel panel-default"&gt;
                      &lt;textarea id="regex_input" style="width: 100%" rows="10"
                          tabindex="3"&gt;&lt;/textarea&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                  &lt;div class="col-sm-6 col-xs-12"&gt;
                    &lt;h4&gt;Test Output&lt;/h4&gt;
                    &lt;div id="regex_intro_panel" class="panel panel-default"&gt;
                      &lt;div class="panel-body"&gt;
                        &lt;p&gt;Use this editor to test regular expressions as you write them,
                          both in the client and as they would run in ServiceNow.&lt;/p&gt;
                        &lt;p&gt;The expression will be automatically evaluated on whichever
                          target you have selected (client or server*) and the result shown here.&lt;/p&gt;
                        &lt;p&gt;&lt;small&gt;*Global scope is always used when evaluating on the
                          server.&lt;/small&gt;&lt;/p&gt;
                      &lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div id="regex_match_panel" class="panel panel-success" style="display: none"&gt;
                      &lt;div class="panel-heading"&gt;
                        &lt;h3 class="panel-title"&gt;Match&lt;/h3&gt;
                      &lt;/div&gt;
                      &lt;div class="panel-body" id="regex_match"&gt;&lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div id="regex_group_panel" class="panel panel-success" style="display: none"&gt;
                      &lt;div class="panel-heading"&gt;
                        &lt;h3 class="panel-title"&gt;Match groups&lt;/h3&gt;
                      &lt;/div&gt;
                      &lt;div class="panel-body" id="regex_group"&gt;&lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div id="regex_error_panel" class="alert alert-danger" style="display: none"&gt;
                      &lt;strong id="regex_error"&gt;&lt;/strong&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
                &lt;div id="regex_help"&gt;
                  &lt;div class="col-xs-12"&gt;
                    &lt;h4&gt;Words and Ranges&lt;/h4&gt;
                    &lt;table class="table table-striped"&gt;
                      &lt;tr&gt;&lt;td style="width: 9em;"&gt;&lt;code&gt;play&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Match the word 'play'&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;1337&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Match the number '1337'&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;[TF2]&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A single character of T, F or 2&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;[^xyz]&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Any single character except x, y or z&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;[a-z]&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Any single character in the lowercase range a-z&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;[a-zA-Z]&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Any single character in ranges a-z or A-Z&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;[a-zA-Z0-9]&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Any alphanumeric character&lt;/td&gt;&lt;/tr&gt;
                    &lt;/table&gt;
                    &lt;h4&gt;Classes&lt;/h4&gt;
                    &lt;table class="table table-striped"&gt;
                      &lt;tr&gt;&lt;td style="width: 9em;"&gt;&lt;code&gt;.&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Any single character&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;\d&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A single digit&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;\D&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A single non-digit&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;\s&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Any whitespace character&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;\S&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Any non-whitespace character&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;\w&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Any word character (alphanumeric or underscore)&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;\W&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Any non-word character&lt;/td&gt;&lt;/tr&gt;
                    &lt;/table&gt;
                    &lt;h4&gt;Quantifiers&lt;/h4&gt;
                    &lt;table class="table table-striped"&gt;
                      &lt;tr&gt;&lt;td style="width: 9em;"&gt;&lt;code&gt;d?&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Zero or one of d&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;o*&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Zero or more of o&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;o+&lt;/code&gt;&lt;/td&gt;&lt;td&gt;One or more of o&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;m{4}&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Exactly 4 of m&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;H{2,}&lt;/code&gt;&lt;/td&gt;&lt;td&gt;2 or more of H&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;L{1,3}&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Between 1 and 3 of L&lt;/td&gt;&lt;/tr&gt;
                    &lt;/table&gt;
                    &lt;h4&gt;Anchors&lt;/h4&gt;
                    &lt;table class="table table-striped"&gt;
                      &lt;tr&gt;&lt;td style="width: 9em;"&gt;&lt;code&gt;^&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Line start (works with multiline)&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;$&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Line end (works with multiline)&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;\A&lt;/code&gt;&lt;/td&gt;&lt;td&gt;String start (ignore multiline)&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;\Z&lt;/code&gt;&lt;/td&gt;&lt;td&gt;String end (ignore multiline)&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;\b&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A word boundary&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;\B&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A non-word boundary&lt;/td&gt;&lt;/tr&gt;
                    &lt;/table&gt;
                    &lt;h4&gt;Alternation and Groups&lt;/h4&gt;
                    &lt;table class="table table-striped"&gt;
                      &lt;tr&gt;&lt;td style="width: 9em;"&gt;&lt;code&gt;dead|alive&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Match 'dead' or 'alive'&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;(flag)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Capture a group containing 'flag'.&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;(?!flag)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Non-capturing group.&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;\2&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Reference the second captured group.&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;123(?=4)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Positive lookahead. Ensure 123 is followed by 4.&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;123(?!5)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Negative lookahead. Ensure 123 is not followed by 5.&lt;/td&gt;&lt;/tr&gt;
                    &lt;/table&gt;
                    &lt;h4&gt;Options&lt;/h4&gt;
                    &lt;table class="table table-striped"&gt;
                      &lt;tr&gt;&lt;td style="width: 9em;"&gt;&lt;code&gt;g&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Global matching. Lookup all matches instead of just the first.&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;m&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Multiline. $ and ^ will match on newlines.&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;i&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Case insensitive matching.&lt;/td&gt;&lt;/tr&gt;
                    &lt;/table&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;

              &lt;div id="table_hierarchy_pane" role="tabpanel" class="tab-pane fade monospace"&gt;
                &lt;div class="wrap row"&gt;
                  &lt;div class="col-xs-12"&gt;
                    &lt;div id="table_hierarchy_loading" class="pull-right" style="display:none;"&gt;
                      &lt;i class="glyphicon glyphicon-refresh spin"&gt;&lt;/i&gt;
                    &lt;/div&gt;
                    &lt;h4&gt;Table Hierarchy&lt;/h4&gt;
                    &lt;div class="panel-body"&gt;
                      &lt;p&gt;Type in a table name to see all the tables in its hierarchy.&lt;/p&gt;
                      &lt;p&gt;Hit &lt;kbd&gt;Enter&lt;/kbd&gt; to run.&lt;/p&gt;

                      &lt;table class="table table-condensed"&gt;
                        &lt;tr&gt;&lt;td&gt;&lt;code&gt;incident&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Find all tables with names containing 'incident'&lt;/td&gt;&lt;/tr&gt;
                        &lt;tr&gt;&lt;td&gt;&lt;code&gt;&amp;gt;incident&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Find all tables with names starting with 'incident'&lt;/td&gt;&lt;/tr&gt;
                        &lt;tr&gt;&lt;td&gt;&lt;code&gt;=incident&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Show only the 'incident' table&lt;/td&gt;&lt;/tr&gt;
                        &lt;tr&gt;&lt;td&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Show all tables&lt;/td&gt;&lt;/tr&gt;
                      &lt;/table&gt;

                      &lt;form class="form" action="" method="post" id="table_hierarchy_form"&gt;
                        &lt;div class="input-group"&gt;
                          &lt;input type="text" class="form-control" id="table_hierarchy_table" name="table_hierarchy_table" placeholder="table" /&gt;
                          &lt;span class="input-group-btn"&gt;
                           &lt;button type="submit" class="btn btn-default"&gt;Show&lt;/button&gt;
                          &lt;/span&gt;
                        &lt;/div&gt;
                        &lt;div class="checkbox"&gt;
                          &lt;label&gt;
                            &lt;input type="checkbox" id="table_hierarchy_table_do_label" checked="checked" /&gt; Search table labels
                          &lt;/label&gt;
                        &lt;/div&gt;
                      &lt;/form&gt;

                    &lt;/div&gt;
                  &lt;/div&gt;
                  &lt;div id="table_hierarchy_result_container" class="col-xs-12" style="display: none"&gt;
                    &lt;h4&gt;Hierarchy&lt;/h4&gt;
                    &lt;div id="table_hierarchy_result"&gt;&lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;

              &lt;div id="system_log_pane" role="tabpanel" class="tab-pane fade"&gt;
                &lt;iframe id="system_log_frame" style="border: 0; width: 100%"&gt;&lt;/iframe&gt;
              &lt;/div&gt;

              &lt;div id="node_log_pane" role="tabpanel" class="tab-pane fade"&gt;
                &lt;input type="hidden" id="node_log_url" /&gt;
                &lt;iframe id="node_log_frame" style="border: 0; width: 100%"&gt;&lt;/iframe&gt;
              &lt;/div&gt;

            &lt;/div&gt;&lt;!--/.tab-content--&gt;

          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

    &lt;/div&gt;

    &lt;!-- jQuery (necessary for Bootstraps JavaScript plugins) --&gt;
    &lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"&gt;&lt;/script&gt;
    &lt;script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/jquery-ui.min.js"&gt;&lt;/script&gt;

    &lt;!-- Bootstrap --&gt;
    &lt;script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"&gt;&lt;/script&gt;

    &lt;!-- Bootstrap Toggle --&gt;
    &lt;script src="https://gitcdn.github.io/bootstrap-toggle/2.2.0/js/bootstrap-toggle.min.js"&gt;&lt;/script&gt;

    &lt;!-- Xplore --&gt;
    &lt;script src="/snd_xplore.jsdbx"&gt;&lt;/script&gt;
    &lt;script src="/snd_xplore_reporter.jsdbx"&gt;&lt;/script&gt;

    &lt;!-- CodeMirror - native scripts in ServiceNow --&gt;
    &lt;script src="/codemirror.js"&gt;&lt;/script&gt;
    &lt;script src="/scripts/javascript.js"&gt;&lt;/script&gt;

    &lt;!-- Google Code Prettify --&gt;
    &lt;script src="https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js"&gt;&lt;/script&gt;

    &lt;script src="/snd_xplore_ui.jsdbx"&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
&lt;/j:jelly&gt;]]&gt;&lt;/xml&gt;&lt;/sys_ui_macro&gt;&lt;/record_update&gt;</payload>
<payload_hash/>
<remote_update_set display_value="[ws] Xplore: Developer Toolkit - 4.5">c1bde016dbdc8e10b0fa3fd3e296194c</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>kyle.stinar@continuant.com</sys_created_by>
<sys_created_on>2024-02-13 17:49:24</sys_created_on>
<sys_id>91bde016dbdc8e10b0fa3fd3e2961950</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1628c66dfd80000000</sys_recorded_at>
<sys_updated_by>kyle.stinar@continuant.com</sys_updated_by>
<sys_updated_on>2024-02-13 17:49:24</sys_updated_on>
<table/>
<target_name>snd_xplore_main</target_name>
<type>Macro</type>
<update_domain>global</update_domain>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_script_include_ef324e340f7efe0094f3c09ce1050ecf</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;public&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;global.snd_Xplore_code&lt;/api_name&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;snd_Xplore_code&lt;/name&gt;&lt;script&gt;&lt;![CDATA[/**
 * This script is deliberately empty. It's used to workaround a new feature in
 * Istanbul Patch 4 that requires a real record to be passed to GlideScopedEvaluator.
 */]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;james@thewhitespace.io&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2017-05-15 16:23:00&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;true&lt;/sys_customer_update&gt;&lt;sys_id&gt;ef324e340f7efe0094f3c09ce1050ecf&lt;/sys_id&gt;&lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;&lt;sys_name&gt;snd_Xplore_code&lt;/sys_name&gt;&lt;sys_package display_value="[ws] Xplore: Developer Toolkit" source="0f6ab99a0f36060094f3c09ce1050ee8"&gt;0f6ab99a0f36060094f3c09ce1050ee8&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="[ws] Xplore: Developer Toolkit"&gt;0f6ab99a0f36060094f3c09ce1050ee8&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_ef324e340f7efe0094f3c09ce1050ecf&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;james@thewhitespace.io&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2017-05-20 22:21:54&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash/>
<remote_update_set display_value="[ws] Xplore: Developer Toolkit - 4.5">c1bde016dbdc8e10b0fa3fd3e296194c</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>kyle.stinar@continuant.com</sys_created_by>
<sys_created_on>2024-02-13 17:49:24</sys_created_on>
<sys_id>95bde016dbdc8e10b0fa3fd3e296194f</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1628c66dfd80000000</sys_recorded_at>
<sys_updated_by>kyle.stinar@continuant.com</sys_updated_by>
<sys_updated_on>2024-02-13 17:49:24</sys_updated_on>
<table/>
<target_name>snd_Xplore_code</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_properties_category_m2m_50ad445edb08d700b1307b5b8c9619bd</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties_category_m2m"><sys_properties_category_m2m action="INSERT_OR_UPDATE"><category display_value="Xplore Settings">439d0cdadb08d700b1307b5b8c9619a2</category><order>200</order><property display_value="snd_xplore.log_request" name="snd_xplore.log_request">7ab919cb0fee420094f3c09ce1050e41</property><sys_class_name>sys_properties_category_m2m</sys_class_name><sys_created_by>james@thewhitespace.io</sys_created_by><sys_created_on>2018-02-04 23:10:52</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>50ad445edb08d700b1307b5b8c9619bd</sys_id><sys_mod_count>1</sys_mod_count><sys_name>snd_xplore.log_request.Xplore Settings</sys_name><sys_package display_value="[ws] Xplore: Developer Toolkit" source="0f6ab99a0f36060094f3c09ce1050ee8">0f6ab99a0f36060094f3c09ce1050ee8</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="[ws] Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</sys_scope><sys_update_name>sys_properties_category_m2m_50ad445edb08d700b1307b5b8c9619bd</sys_update_name><sys_updated_by>james@thewhitespace.io</sys_updated_by><sys_updated_on>2018-02-04 23:25:54</sys_updated_on></sys_properties_category_m2m></record_update>]]></payload>
<payload_hash/>
<remote_update_set display_value="[ws] Xplore: Developer Toolkit - 4.5">c1bde016dbdc8e10b0fa3fd3e296194c</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>kyle.stinar@continuant.com</sys_created_by>
<sys_created_on>2024-02-13 17:49:24</sys_created_on>
<sys_id>99bde016dbdc8e10b0fa3fd3e296194e</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1628c66dfd80000000</sys_recorded_at>
<sys_updated_by>kyle.stinar@continuant.com</sys_updated_by>
<sys_updated_on>2024-02-13 17:49:24</sys_updated_on>
<table/>
<target_name>snd_xplore.log_request.Xplore Settings</target_name>
<type>Category Property</type>
<update_domain>global</update_domain>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_processor_39225f460f66420094f3c09ce1050e91</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_processor"&gt;&lt;sys_processor action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;class_name/&gt;&lt;description&gt;Where the magic happens to generate and run the Xplore UI.&lt;/description&gt;&lt;interactive&gt;false&lt;/interactive&gt;&lt;name&gt;snd_xplore&lt;/name&gt;&lt;parameters/&gt;&lt;params_endpoint/&gt;&lt;path&gt;snd_xplore&lt;/path&gt;&lt;path_endpoint/&gt;&lt;require_csrf&gt;false&lt;/require_csrf&gt;&lt;roles/&gt;&lt;script&gt;&lt;![CDATA[/*!
  Processor for generating the user interface and handling AJAX calls.
*/

//==============================================================================
// Action List
//==============================================================================

function ActionList() {}

/**
  summary:
    Format a string e.g. XML
  returns: String
**/
ActionList.prototype.formatString = function (params) {
  var type = params.type,
      str = params.string,
      isXML = str.trim().substr(0,1) == '&lt;',
      tmp;
  try {
    if (type.indexOf('XMLDocument') &gt; -1 || isXML) {
      tmp = new XMLDocument(str);
      return tmp.toIndentedString().trim();
    } else {
      tmp = new JSON();
      tmp.prettify();
      str = tmp.decode(str);
      return tmp.encode(str);
    }
  } catch (e) {}
  return str;
};

/**
  summary:
    Get the available scopes
  returns: Array
    Array of ordered scopes, except for global which is the first entry.
**/
ActionList.prototype.getScopes = function getScopes() {
  var gr = new GlideAggregate('sys_scope');
  gr.addQuery('scope', '!=', 'global');
  gr.orderBy('name'); // so we can see name
  gr.orderBy('private');
  gr.groupBy('scope');
  gr.query();
  var scopes = [];
  while (gr.next()) {
    if (gr.scope.toString().indexOf('sn_') === 0) {
      if (gr.getValue('private') != 'false') {
        continue; // easiest way to ignore ServiceNow scopes, Geneva has private flag
      }
    }
    scopes.push({
      name: gr.getValue('name') + ' [' + gr.getValue('scope') + ']',
      scope: gr.getValue('scope')
    });
  }
  scopes.sort(function (a, b) {
    if (a.name &gt; b.name) return 1;
    if (b.name &gt; a.name) return -1;
    return 0;
  });
  scopes.unshift({
    name: 'Global [global]',
    scope: 'global'
  });
  return scopes;
};

/**
  summary:
    Evaluate a regular expression against a string
  input: String
    The string to test with the regex.
  expression: String
    The regular expression as a string
  options: String (Optional)
    The regular exression options, e.g. 'g'
  returns: Object
**/
ActionList.prototype._evalRegex = function _evalRegex(input, expression, options) {
  var regex,
      matches = [],
      groups = [],
      m, a, i,
      loop = options ? options.toString().indexOf('g') &gt;= 0: false;

  if (input &amp;&amp; expression) {
    try {
      regex = new RegExp(expression, options);
    } catch (e) {
      return {
        error: ('' + e).split(':').pop()
      };
    }
    while ((m = regex.exec(input))) {
      matches.push({
        index: m.index,
        length: m[0].length
      });
      // because groups.concat(m) will add the Array as an object instead of its values
      for (i = 1, a = []; i &lt; m.length; i++) {
          a.push(m[i]);
      }
      groups.push(a);
      if (!loop) break;
    }
  }
  return {
    matches: matches,
    groups: groups,
    input: input
  };
};

/**
  summary:
    Get basic details of all the tables in the system
  returns: Object
**/
ActionList.prototype.getTables = function getTables() {
  var tables = {};
  var gr = new GlideRecord('sys_db_object');
  gr.query();
  while (gr.next()) {
    tables[gr.getValue('name')] = {
      super_class:  gr.getValue('super_class'),
      label:        gr.getValue('label'),
      scope:        gr.getValue('sys_scope'),
      sys_id:       gr.getUniqueValue(),
      name:         gr.getValue('name')
    };
  }
  return tables;
};

/**
  summary:
    Get records from a table.
  param: table [String]
    The table to search.
  param: fields [Array]
    An array of field names to return.
  param: query [String] Optional
    An encoded query to use to restrict the records.
  param: limit [Integer] Optional
    Limit the number of records returned.
  returns: Array
    An array of record objects containing the requested fields.
**/
ActionList.prototype._getRecordValues = function _getRecordValues(table, fields, query, limit) {
  var records = [],
      gr;

  function mapFields(gr) {
    var o = {};
    for (var i = 0; i &lt; fields.length; i++) {
      var f = fields[i];
      if (f.indexOf('$') == '0') {
        o[f] = gr[f.substr(1)].getDisplayValue();
      } else {
        o[f] = gr.getValue(f);
      }
    }
    return o;
  }

  gr = new GlideRecord(table);
  if (gr.isValid()) {
    gr.addEncodedQuery(query);
    if (limit) {
      gr.setLimit(limit);
    }
    gr._query();
    while (gr._next()) {
      records.push(mapFields(gr));
    }
  }
  return records;
};

ActionList.prototype.logs = function logs() {
  var result = new snd_Xplore.ObjectReporter().getReport();
  result.messages = snd_Xplore.getOutputMessages();
  result.logs = snd_Xplore.getLogs();
  return result;
};

ActionList.prototype.regex = function regex(params) {
  var data = params.data;
  return this._evalRegex(data.input, data.expression, data.options);
};

ActionList.prototype.run = function run(params) {
  var report;
  if (!params.data) {
    gs.addErrorMessage('Invalid HTTP data object.');
    report = new snd_Xplore.ObjectReporter().getReport();
    report.messages = snd_Xplore.getOutputMessages();
  } else {
    runner = new XploreRunner();
    report = runner.run(params.data);
  }
  return report;
};

ActionList.prototype.getTableHierarchy = function getTableHierarchy(params) {
  var options = {};
  options.search_labels = params.search_labels == '1' || params.search_labels == 'true';
  return XploreTableHierarchy(params.table, options);
};

ActionList.prototype.getScripts = function getScripts(params) {
  return this._getRecordValues('sys_script_include',
      ['sys_id', 'name', 'api_name', '$sys_scope'], 'ORDERBYname^EQ');
};

ActionList.prototype.getScript = function (params) {
  var sys_id = params.sys_id;
  if (sys_id &amp;&amp; sys_id.length == 32) {
    var records = this._getRecordValues(
        'sys_script_include', ['name', 'api_name', 'script'], 'sys_id=' + sys_id, 1);
    if (records.length) {
      return records[0];
    } else {
      throw 'Not found.';
    }
  } else {
    throw 'Expected sys_id not valid.';
  }
};

//==============================================================================
// Xplore Runner
//==============================================================================

/**
  summary:
    Container class for running an exploratory programming request.
**/
function XploreRunner() {
  // #private: the current transaction
  this.transaction = null;

  this.default_reporter = new snd_Xplore.ObjectReporter();

  this.reporter_name = 'snd_Xplore.ObjectReporter';
}

// global scope is implied in this name
XploreRunner.C_TEMP_SCRIPT_NAME = 'snd_Xplore_code';

/**
  summary:
    Process a request.
  options: Object
    An object that contains the things we need to process the request.
      code: String
        The code to execute.
      breadcrumb: String
        List of dot separated property names to evaluate on the result.
  returns: Object
    The snd_XploreReporter response object.
**/
XploreRunner.prototype.run = function run(options) {
  var script = options ? options.code : '';
  var report;
  var self = this;

  function end(report) {
    report = report || self.default_reporter.getReport();
    report.messages = snd_Xplore.getOutputMessages();
    self.stop();
    return report;
  }

  if (!this.productionCheck()) {
    gs.addErrorMessage('Script execution has been disabled ("snd_xplore.production_access" == false)');
    gs.addErrorMessage('Production environment detected ("glide.installation.production" == true)');
    return end();
  }

  if (!options) {
    gs.addErrorMessage('Xplore processor did not receive a request.');
    return end();
  }

  this.start();

  if (!script) {
    gs.addErrorMessage("Expression required.");
    return end();
  }

  try {
    this.validateScript(script);
    this.logRequest(script, options.scope);

    if (options.fix_gslog) {
      script = this.fixLogs(script);
    }

    // not ideal doing this
    global.user_data = this.formatUserData(options.user_data, options.user_data_type);
    options.dotwalk = options.breadcrumb;

    if (options.scope &amp;&amp; options.scope != 'global') {
      report = this.runScopedScript(script, options);
    } else {
      report = this.runGlobalScript(script, options);
    }
  } catch (e) {
    var x = new snd_Xplore();
    x.xplore(e, this.reporter_name);
    report = x.reporter.getReport();
  }

  return end(report);
};

/**
 * Check if we are running in Production and the user has access to run scripts.
 *
 * @return {Boolean}
 */
XploreRunner.prototype.productionCheck = function () {
  var is_production = gs.getProperty('glide.installation.production') == 'true';
  var is_production_enabled = gs.getProperty('snd_xplore.production_access') == 'true';
  if (is_production) return is_production_enabled;
  return true;
};

/**
 * Replace calls to gs.print etc so that we can capture the logs.
 *
 * @param  {String} code
 * @return {String}
 */
XploreRunner.prototype.fixLogs = function (code) {
  return code.replace(/gs\.(print|log|debug|info|warn|error)/g, "snd_Xplore.gs$1");
};

/**
 * Format the user data payload as the object it should be.
 *
 */
XploreRunner.prototype.formatUserData = function (str, type) {
  var err = 'Unable to parse User Data as ',
      tmp;
  if (type.indexOf('XMLDocument2') &gt; -1) {
    tmp = new XMLDocument2();
    if (tmp.parseXML(str)) {
      return tmp;
    }
    throw new Error(err + 'XMLDocument2');
  } else if (type.indexOf('XMLDocument') &gt; -1) {
    try {
      tmp = new XMLDocument(str);
      return tmp.toIndentedString().trim();
    } catch (e) {
      throw new Error(err + 'XMLDocument. ' + e);
    }
  } else if (type.indexOf('JSON') &gt; -1) {
    try {
      tmp = new JSON();
      return tmp.decode(str);
    } catch (e) {
      throw new Error(err + 'JSON. ' + e);
    }
  }
  return str;
};

/**
  summary:
    capture calls to gs.print and enable debug for this session
**/
XploreRunner.prototype.start = function start() {
  this.transaction = GlideTransaction.get();
  GlideSessionDebug.enable(this.transaction);
};

/**
  summary:
    stop the debug session for this transaction
**/
XploreRunner.prototype.stop = function stop() {
  if (this.transaction) {
    GlideSessionDebug.disable(this.transaction);
  }
};

/**
  summary:
    Log the code in syslog if necessary (like background script does)
**/
XploreRunner.prototype.logRequest = function logRequest(code, scope) {
  if (gs.getProperty('snd_xplore.log_request', 'true') == 'true') {
    gs.log('Xplore Request [' + (scope || 'global') + ']:\n' + code, 'SND Xplore');
  }
};

/**
  summary:
    Validate the script to run for any syntax errors.
  returns: true
  throws: string
**/
XploreRunner.prototype.validateScript = function validateScript(script) {
  var error = GlideSystemUtilScript._getScriptError(script);
  if (error) {
    var e = new SyntaxError(error);
    var m = error.match(/(.+) at line \((\d+)\) column \((\d+)\) problem = (.+)/);
    if (m) {
      e.name = m[4];
      e.lineNumber = m[2];
      e.column = m[3];
    }
    throw e;
  }
  return true;
};

/**
  summary:
    Run Xplore on a script in the global environment
  script: String
    The script to evaluate
  options: Object
    An object of options
**/
XploreRunner.prototype.runGlobalScript = function runGlobalScript(script, options) {
  var obj,
      x;

  // try to catch exceptions here - this won't catch all exceptions
  // newlines will affect the exception lineNumber
  script = 'try {' + script + ';\n} catch (e) { e; }';
  obj = GlideEvaluator.evaluateString(script);
  x = new snd_Xplore();
  x.xplore(obj, 'snd_Xplore.ObjectReporter', options);
  return x.reporter.getReport();
};

/**
  summary:
    Run Xplore on a script in a scoped environment
  script: String
    The script to evaluate
  options: Object
    An object of options
**/
XploreRunner.prototype.runScopedScript = function runScopedScript(script, options) {

  var scopeId = (function (scopeName) {
    if (scopeName == 'global') return 'global';
    var gr = new GlideRecord('sys_scope');
    gr.addQuery('scope', '=', scopeName);
    gr.setLimit(1);
    gr.query();
    if (gr.next()) {
      return gr.getUniqueValue();
    }
    throw 'Unknown scope [' + scopeName + ']';
  })(options.scope);

  var safeOptions = {};
  safeOptions = {
    dotwalk: options.dotwalk,
    show_props: options.show_props,
    show_strings: options.show_strings
  };

  var tryScript = '"try {" + $$script + "; } catch (e) { e; }"';
  var scopedScript = '';
  scopedScript += 'var gr = new GlideRecord("sys_script_include");\n';
  scopedScript += 'gr.get("api_name", "global.' + XploreRunner.C_TEMP_SCRIPT_NAME + '");\n';
  scopedScript += 'gr.api_name = "' + options.scope + '." + gr.name;\n';
  scopedScript += 'gr.sys_scope = "' + scopeId + '";\n';
  scopedScript += 'gr.script = ' + tryScript + ';\n';
  scopedScript += 'var gse = new GlideScopedEvaluator();\n';
  scopedScript += 'gse.putVariable("user_data", user_data);\n';
  scopedScript += 'var obj = gse.evaluateScript(gr, "script");\n';
  scopedScript += 'var options = ' + (new JSON().encode(safeOptions)) + ';\n';
  scopedScript += 'var x = new global.snd_Xplore();\n';
  scopedScript += 'x.xplore(obj, "snd_Xplore.ObjectReporter", options);\n';
  scopedScript += '$$result = x.reporter.getReport();\n';

  try {
    this.validateScript(scopedScript);
  } catch (e) {
    e.name = 'Scoped Script Generation SyntaxError';
    throw this.handleException(e, scopedScript);
  }

  var gr = new GlideRecord('sys_script_include');
  if (!gr.get('api_name', 'global.' + XploreRunner.C_TEMP_SCRIPT_NAME)) {
    gr.name = XploreRunner.C_TEMP_SCRIPT_NAME;
    gr.api_name = 'global.' + gr.name;
    gr.script = '/* This script is deliberately empty. */';
    gr.insert();
  }
  gr.script = scopedScript;

  var gse = new GlideScopedEvaluator();
  gse.putVariable('user_data', options.user_data);
  gse.putVariable('$$script', script);
  gse.putVariable('$$result', null);
  gse.evaluateScript(gr, 'script');
  return gse.getVariable('$$result');
};

/**
  summary:
    Handle an exception to see if there is a line number we can use.
  e: mixed
    The error object
  code: String
    The code that generated the exception.
  returns: Boolean
    True if the error was explainable, false if not.
    This just means that we can forward the error to xplore if we like.
**/
XploreRunner.prototype.handleException = function handleException(e, code) {
  var errorStr = 'Exception thrown. ' + e;
  var lines, isUnknown = true;
  if (typeof e.lineNumber === 'string') {
    lines = this.getLines(code, parseInt(e.lineNumber, 10), 2);
    if (lines.length) {
      errorStr += '&lt;br /&gt;' + lines.join('&lt;br /&gt;').replace(' ', '&amp;nbsp;');
      isUnknown = false;
    }
  }
  gs.addErrorMessage(errorStr);
  return isUnknown;
};

/**
  summary:
    Gets the lines of some text, e.g. code. Useful for showing errors.
  text: String
    The text to pull the lines from.
  at: Number
    The line number to highlight.
  span: Number
    The number of lines to add either side of the target line.
  **/
XploreRunner.prototype.getLines = function getLines(text, at, span) {
  var lines = text.split('\n');
  var result = [], i;

  function pre(i) {
    return i + 1 + ': ';
  }

  if (lines.length &gt;= at) {
    at--; // account for base 0;
    for (i = (at - span); i &lt; at; i++ ) {
      result.push(pre(i) + lines[i]);
    }
    result.push('=&gt; ' + pre(at) + lines[at]);
    for (i = (at + 1); i &lt;= (at + span) &amp;&amp; i &lt; lines.length; i++) {
      result.push(pre(i) + lines[i]);
    }
  }

  return result;
};

//==============================================================================
// Xplore Table Hierarchy
//==============================================================================

/**
  summary:
    Xplore table helper
**/
function XploreTableHierarchy(table, options) {

  // The maximum number of table extensions we will handle
  var MAX_DEPTH = 25;

  var SEARCH_LABELS =  options ? !!options.search_labels : false;

  /**
    summary:
      Get the hierarchy of a given table or all the tables.
    description:
      Builds an multi-dimensional array of objects, where each
      object represents a base table. Each object can have children
      and the children can also have children.
      The object also contains details of the table.
    table: String (Optional)
      The table to get the Hierarchy for. Providing no table
      will result in the entire table hierarchy being processed.
    returns: Array
  **/
  function getHierarchy(table) {
    var info,
      hierarchy,
      data = {};

    if (!table) throw new Error('Invalid table.');

    info = getTableInfo(table, SEARCH_LABELS);
    hierarchy = [];
    hierarchyLookup = {};
    data.names = getSortedKeys(info);

    // loop until we have no more tables to check
    eachArr(Array(MAX_DEPTH), function () {
      var nextNames = []; // process these names on the next iteration
      eachArr(data.names, function (i, name) {
        var dbo = info[name];
        /*dbo.toString = function () {
          return this.super_class + '.' + this.name;
        };*/
        if (!dbo.super_class) {
          // this is a base class
          dbo.children = []; // add a place for the children to go
          hierarchy.push(dbo); // add to our hierarchy
          hierarchyLookup[dbo.sys_id] = dbo;
        } else if (hierarchyLookup[dbo.super_class] !== undefined) {
          // this is an extension and it's parent has already been processed
          dbo.children = []; // children can have children
          hierarchyLookup[dbo.sys_id] = dbo;
          hierarchyLookup[dbo.super_class].children.push(dbo);
        } else {
          // process on next iteration
          nextNames.push(name);
        }
      });
      if (!nextNames.length) return false;
      data.names = nextNames;
    });

    return hierarchy;
  }

  /**
    summary:
      Get table details hierarchy information from sys_db_object.
    table: String (Optional)
      Look for details of all tables in this table's heirarchy.
      Not providing this parameter will return details of all tables.
    returns: Object
      An 2D object where each key is the name of the table and the
      value is an object containing a copy of the sys_db_object data.
  **/
  function getTableInfo(table, searchLabels) {
    var required, matchTable, matcher;

    // Is the user looking for all tables?
    if (table == '*') table = '';

    // Looking for all tables or a specific one
    if (!table || table.substr(0,1) === '=') {

      // remove the prefixed equal sign
      if (table) table = table.substr(1);

      if (table &amp;&amp; searchLabels) {
        // Get the table object from its label
        required = getDbObjectByLabel(table);
      } else {
        // Get the table object from its name, or ALL table objects if table = ''
        required = getDbObject(table);
      }

    } else {

      matchTable = (function (t) {
        var c = t.substr(0,1);
        if (c === '&gt;') {
          t = '^' + t.substr(1); // starts with
        } else if (c === '=') {
          t = '^' + t.substr(1) + '$'; // equals
        } else if (c === '*') {
          t = '';
        }
        // default is 'contains'
        return t;
      })(table);
      matcher = new RegExp(matchTable, 'i');

      // match on table is required, so get all tables and match
      required = {};
      eachObj(getDbObject(), function (name, obj) {
        var match = obj.name ? obj.name.match(matcher) : null;
        if (!match &amp;&amp; searchLabels) {
          match = obj.label ? obj.label.match(matcher) : null;
        }
        if (match) {
          eachObj(getDbObject(name), function (name, obj) {
            required[name] = required[name] || obj;
          });
        }
      });

    }

    return required;
  }

  /**
    summary:
      Get an object of objects containing sys_db_object info
    param: label [String]
    returns: Object
  **/
  var getDbObjectByLabel = function (label) {
    var result = {};
    var gr = new GlideRecord('sys_db_object');
    gr.addQuery('label', '=', label);
    gr.setLimit(1);
    gr.query();
    if (gr.next()) {
      return getDbObject(gr.name);
    } else {
      throw 'Invalid table label: ' + label;
    }
  };

  /**
    summary:
      Get an object of objects containing sys_db_object info
    param: table [String]
    returns: Object
  **/
  var getDbObject = (function () {
    var dbo = GlideDBObjectManager.get();
    return function (table) {
      var result = {};
      var gr = new GlideRecord('sys_db_object');
      if (table) {
        gr.addQuery('name', 'IN', dbo.getHierarchy(table).toArray().join(','));
      }
      gr.query();
      if (!gr.hasNext()) {
        throw 'Invalid table name: ' + table;
      }
      while (gr.next()) {
        result[gr.getValue('name')] = info(gr);
      }
      return result;
    };
  })();

  function info(gr) {
    return {
      super_class: gr.getValue('super_class'),
      label: gr.getValue('label'),
      scope: gr.getValue('sys_scope'),
      sys_id: gr.getUniqueValue(),
      name: gr.getValue('name')
    };
  }

  /**
    summary:
      Helper function: loop through arrays
    arr: Array
      The array to loop through.
    fn: Function
      Callback function being given two parameters: index
      and current array item.
      Returning false will cancel the iteration.
  **/
  function eachArr(arr, fn) {
    var len = arr.length;
    for (var i = 0; i &lt; len; i++) {
      if (fn(i, arr[i]) === false) {
        break;
      }
    }
  }

  /**
    summary:
      Helper function: loop through objects
    param: o [Object]
    param: fn [Function]
      Callback function being given two parameters: key and current object property.
      Returning false will cancel the iteration.
  **/
  function eachObj(o, fn) {
    for (var k in o) {
      if (fn(k, o[k]) === false) {
        break;
      }
    }
  }

  /**
    summary:
      Helper function: get an array of an objects' sorted property names
    obj: Object
    returns: Array
  **/
  function getSortedKeys(obj) {
    var keys = [];
    for (var key in obj) {
      keys.push(key);
    }
    keys.sort();
    return keys;
  }

  return getHierarchy(table);
}

//==============================================================================
// Xplore Process Script
//==============================================================================

(function () {

  snd_console = typeof snd_console === 'object' ? snd_console : {toString: function(){return 'not installed';}};

  // the initial UI file to serve
  var UI_MAIN = 'snd_xplore_main';

  // The name of the macro to render when access is denied.
  var UI_403 = '403.html';

  // Variables to inject into UI Macros
  var MACRO_VARS = {

    // The doctype to prepend to the UI file
    'DOCTYPE': '&lt;!doctype html&gt;',

    // required for attachments to work with glide.security.use_csrf_token on
    'SYSPARM_CK': gs.getSessionToken(),

    // The maximum attachment size that a user can upload
    'MAX_ATTACH_SIZE': (function () {
      var max = gs.getProperty('com.glide.attachment.max_size');
      if (!max) max = 1000;
      else max = parseInt(max, 10);
      if (isNaN(max)) { max = 20; }
      return max + 'MB';
    })(),

    'AMP': '&amp;',

    'BUILD_DATE': gs.getProperty('glide.builddate')
  };

  // prevent the CSRF token from being required for these actions
  var NO_CSRF_CHECK = [];

  // the actions that can be run
  var actions = {};

  var json = new global.JSON();

  // Makes the parameters passed to the request easily av
  var params = (function () {
    var names = g_request.getParameterNames(),
        params = {},
        name,
        i;

    while (names.hasMoreElements()) {
      name = names.nextElement();
      params[name] = '' + g_request.getParameter(name);
    }
    if (params.data) {
      params.data = json.decode(params.data);
    }
    return params;
  })();

  function hasAccess() {
    if (gs.getImpersonatingUserName()) {
      var gr = new GlideRecord('sys_user_has_role');
      gr.addQuery('user.user_name', gs.getImpersonatingUserName());
      gr.addQuery('role.name', 'admin');
      gr.setLimit(1);
      gr.query();
      return gr.hasNext();
    } else {
      return gs.hasRole('admin');
    }
  }

  function isValidRequest(action) {
    return true; // override for time being
    // prevent CSRF
    /*var i;
    if (params.sysparm_ck) {
      return params.sysparm_ck == MACRO_VARS.SYSPARM_CK;
    }
    for (i = 0; i &lt; NO_CSRF_CHECK.length; i++) {
      if (NO_CSRF_CHECK[i] == action) return true;
    }
    return false;*/
  }

  /**
    summary:
      A simple request handler that takes an action and data object.
    param: action [String]
      A keyword that can be used to determine the request.
    param: data [mixed]
      Arbitrary data object for use with processing.
  **/
  function processAction(params) {
    var start_time = new Date().getTime(),
        action_list = new ActionList(),
        action_name = params.action,
        ret = {$success: true},
        errors;

    try {
      if (action_name in action_list) {
          ret.result = action_list[action_name](params);
          if (ret.result === undefined) {
            ret.$success = false;
            ret.$error = 'Action returned undefined.';
          }
      } else {
        ret.$success = false;
        ret.$error = 'Invalid action name: \'' + action_name + '\'';
      }

      errors = snd_console.get ? snd_console.get({type: 'error'}) : [];
      if (errors.length) {
        ret.$success = false;
        ret.$error = errors.pop();
      }

    } catch (ex) {
      ret.$success = false;
      ret.$error = 'Exception occured. ' + ex.name + ': ' + ex.message;
      if (ex.lineNumber) ret.$error += ' on line ' + ex.lineNumber;
    }

    ret.$time = (new Date().getTime()) - start_time;

    if ('debug_mode' in params &amp;&amp; snd_console.getStrings) {
      ret.$snd_console = snd_console.getStrings();
    }

    return ret;
  }

  /**
    summary:
      Process a template from a UI Macro and return the output.
    param: name [String]
      The name of the UI Macro to use.
    param: vars [Object] Optional
      An object of variables to pass to replace in the macro.
      Variables should be in the format `${variable_name}`
    returns: String
  **/
  function processTemplate(name, vars) {

    /**
      summary:
        Simple wrapper to get a single GlideRecord object
      param: table [String]
      param: query [String]
      returns: GlideRecord
    **/
    function getRecord(table, query) {
      var gr = new GlideRecord(table);
      gr.addEncodedQuery(query);
      gr.setLimit(1);
      gr.query();
      return gr.next() ? gr : false;
    }

    /**
      summary:
        Run a Jelly script.
      description:
        Takes an XML Jelly script and runs it with
        variables.
      jelly: String
        A jelly script to run.
      vars: Object (Optional)
        An object of name-value pairs to use in the
        Jelly script. The jelly script will need to
        prefix the names with 'jvar_'.
      returns: String
        The processed Jelly script.
    **/
    function runJellyScript(jelly, vars) {
      var runner = new GlideJellyRunner();
      if (typeof vars === 'object') {
        for (var name in vars) {
          runner.setVariable('jvar_' + name, vars[name]);
        }
      }
      return runner.run(jelly);
    }

    /**
      summary:
        Replaces ${variable} formatted variables in a string with the variable
        value.
      param: str [String]
      param: vars [Object] Optional
      returns: String
    **/
    function replaceVars(str, vars) {
      if (typeof vars == 'object') {
        str = str.replace(/\$\{\s*(\w+)\s*\}/g, function (m, word) {
          return vars.hasOwnProperty(word) ? vars[word] || '' : m;
        });
      }
      return str;
    }

    /**
      summary:
        Automagically set the versions on database Style Sheets and UI Scripts
      description:
        Searchs for links matching the cssdbx or jsdbx format.
        Stylesheets can be referenced by their name (normally sys_id).
        Replaces links with cache aware versions.
      param: html [String]
        The HTML template to work with.
      returns: String
        The modified HTML.
    **/
    function setScriptVersions(html) {

      function substrReplace(str, i, what, len) {
        return str.substr(0, i) + what + str.substr(i + (len || what.length));
      }

      function appendTime(html, match, map) {
        var gr, updated;

        gr = getRecord(map.table, map.key + '=' + match[1]);
        if (gr) {
          updated = new GlideDateTime(gr.sys_updated_on).getNumericValue();
          html = substrReplace(
              html,
              match.index,
              gr[map.val] + '.' + match[2] + '?v=' + updated,
              match[0].length);
        }

        return html;
      }

      var regexp = /([a-zA-Z0-9_.\-]*)\.(cssdbx|jsdbx)/g,
          key_map = {
            'jsdbx':  {table: 'sys_ui_script', key: 'name', val: 'name'},
            'cssdbx': {table: 'content_css',   key: 'name', val: 'sys_id'}
          },
          map,
          match;

      while ((m = regexp.exec(html))) {
        if (key_map.hasOwnProperty(m[2])) {
          html = appendTime(html, m, key_map[m[2]]);
        }
      }

      return html;
    }

    var field = 'name',
        macro = getRecord('sys_ui_macro', field + '=' + name),
        output = '';
    if (macro) {
      output = runJellyScript(macro.xml, vars);
      //output = replaceVars(macro.xml.toString(), vars);
      output = setScriptVersions(output);
    } else {
      output = 'Macro ' + name + ' does not exist.';
    }
    return '&lt;!doctype html&gt;' + output;
  }

  var response;

  // check the user has the role to access
  if (!hasAccess()) {
    g_response.setStatus(403); // forbidden
    //response = processTemplate(UI_403, MACRO_VARS);
    if (response) {
      g_processor.writeOutput('text/html', response);
    } else {
      g_processor.writeOutput('text/plain', 'Error: access restricted.');
    }
  }

  else if ('ui_script' in params) {
    var gr = new GlideRecord('sys_script_include');
    gr.addQuery('api_name', '=', 'global.snd_Xplore');
    gr.setLimit(1);
    gr.query();
    gr.next();
    g_processor.writeOutput('text/plain', gr.script);
  }

  // prevent CSRF - all requests have valid sysparm_ck
  else if (params.action &amp;&amp; !isValidRequest(params.action)) {
    g_response.setStatus(401);
    g_processor.writeOutput('text/plain', 'Authentication is not valid.');
  }

  // process the action that has been requested by the browser
  else if (params.action) {
    response = processAction(params);
    g_processor.writeOutput('application/json', json.encode(response));
  }

  // send the requested template or the main interface
  else {
    response = processTemplate(params.template || UI_MAIN, MACRO_VARS);
    g_processor.writeOutput('text/html', response);
  }

})();]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_processor&lt;/sys_class_name&gt;&lt;sys_created_by&gt;james@thewhitespace.io&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2015-09-18 20:32:13&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;true&lt;/sys_customer_update&gt;&lt;sys_id&gt;39225f460f66420094f3c09ce1050e91&lt;/sys_id&gt;&lt;sys_mod_count&gt;403&lt;/sys_mod_count&gt;&lt;sys_name&gt;snd_xplore&lt;/sys_name&gt;&lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="[ws] Xplore: Developer Toolkit"&gt;0f6ab99a0f36060094f3c09ce1050ee8&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_processor_39225f460f66420094f3c09ce1050e91&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;james@thewhitespace.io&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-02-04 23:38:37&lt;/sys_updated_on&gt;&lt;type&gt;script&lt;/type&gt;&lt;/sys_processor&gt;&lt;/record_update&gt;</payload>
<payload_hash/>
<remote_update_set display_value="[ws] Xplore: Developer Toolkit - 4.5">c1bde016dbdc8e10b0fa3fd3e296194c</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>kyle.stinar@continuant.com</sys_created_by>
<sys_created_on>2024-02-13 17:49:24</sys_created_on>
<sys_id>9dbde016dbdc8e10b0fa3fd3e296194d</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1628c66dfd80000000</sys_recorded_at>
<sys_updated_by>kyle.stinar@continuant.com</sys_updated_by>
<sys_updated_on>2024-02-13 17:49:24</sys_updated_on>
<table/>
<target_name>snd_xplore</target_name>
<type>Processor</type>
<update_domain>global</update_domain>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_ui_script_e9a20c7e0f54564094f3c09ce1050eb4</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ui_script"&gt;&lt;sys_ui_script action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;description&gt;Inject the glasses icon into the UI.&amp;#13;
Tested in Fuji and Geneva.&lt;/description&gt;&lt;global&gt;true&lt;/global&gt;&lt;name&gt;snd_xplore_glasses&lt;/name&gt;&lt;script&gt;&lt;![CDATA[function snd_xplore_glasses () {
  if (typeof jQuery === 'function' &amp;&amp; typeof top.$j === 'function') {
    jQuery(document).ready(function () {
      var top = window.top;

      if (typeof top.snd_xplore_loaded != 'undefined') {
        return;
      }
      top.snd_xplore_loaded = true;

      var hasAdmin = (function () {
        try {
          var roles;
          if (typeof top.NOW == 'object') {
            roles = top.NOW.user.roles.split(',');
          } else if (typeof window.g_user == 'object' &amp;&amp; window.g_user.roles) {
            roles = window.g_user.roles;
          }
          if (!roles) return false;
          for (var i = roles.length - 1; i &gt; -1; i--) {
            if (roles[i] == 'admin') return true;
          }
        } catch (e) {
          jslog('Error with snd_xplore_glasses script finding user roles: ' + e);
        }
        return false;
      })();

      var isUI16 = top.$j('.navpage-header-content').length &gt; 0;

      var title = "Xplore: the professional ServiceNow developer toolkit.";

      var widgetHtml;

      if (hasAdmin) {

        // UI16 - Geneva
        if (isUI16) {
          widgetHtml = '&lt;div class="navpage-header-content"&gt;' +
            '&lt;button data-placement="auto" class="btn btn-icon icon-glasses"' +
            ' title="' + title + '" data-original-title="Xplore" onclick="window.open(\'/snd_xplore.do\', \'_blank\');"&gt;' +
              '&lt;span class="sr-only"&gt;Xplore&lt;/span&gt;' +
            '&lt;/button&gt;&lt;/div&gt;';
          top.$j('#sysparm_search').parents('div.navpage-header-content').first().after(widgetHtml);
        }

        // UI15 - Fuji
        else {
          widgetHtml = '&lt;span id="snd_xplore_span" ' +
            'style="visibility: visible; display: inline-block; zoom: 1; vertical-align: middle;"&gt;' +
              '&lt;span tabindex="0" onclick="window.open(\'/snd_xplore.do\', \'_blank\');"' +
              ' class="icon-glasses sn-tooltip-basic"' +
              ' style="cursor: pointer; font-size: 20px; border: 0;"' +
              ' title="' + title + '"&gt;&lt;span class="sr-only"&gt;' + title +
              '&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;';
          top.$j('#nav_header_stripe_decorations_left').append(widgetHtml);
        }

      }
    });
  }
}
snd_xplore_glasses();]]&gt;&lt;/script&gt;&lt;script_name/&gt;&lt;sys_class_name&gt;sys_ui_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;james@thewhitespace.io&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2015-12-16 13:13:07&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;true&lt;/sys_customer_update&gt;&lt;sys_id&gt;e9a20c7e0f54564094f3c09ce1050eb4&lt;/sys_id&gt;&lt;sys_mod_count&gt;11&lt;/sys_mod_count&gt;&lt;sys_name&gt;snd_xplore_glasses&lt;/sys_name&gt;&lt;sys_package display_value="[ws] Xplore: Developer Toolkit" source="0f6ab99a0f36060094f3c09ce1050ee8"&gt;0f6ab99a0f36060094f3c09ce1050ee8&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="[ws] Xplore: Developer Toolkit"&gt;0f6ab99a0f36060094f3c09ce1050ee8&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_script_e9a20c7e0f54564094f3c09ce1050eb4&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;james@thewhitespace.io&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2017-05-20 22:21:57&lt;/sys_updated_on&gt;&lt;use_scoped_format&gt;false&lt;/use_scoped_format&gt;&lt;/sys_ui_script&gt;&lt;/record_update&gt;</payload>
<payload_hash/>
<remote_update_set display_value="[ws] Xplore: Developer Toolkit - 4.5">c1bde016dbdc8e10b0fa3fd3e296194c</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>kyle.stinar@continuant.com</sys_created_by>
<sys_created_on>2024-02-13 17:49:24</sys_created_on>
<sys_id>9dbde016dbdc8e10b0fa3fd3e2961950</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1628c66dfd80000000</sys_recorded_at>
<sys_updated_by>kyle.stinar@continuant.com</sys_updated_by>
<sys_updated_on>2024-02-13 17:49:24</sys_updated_on>
<table/>
<target_name>snd_xplore_glasses</target_name>
<type>UI Script</type>
<update_domain>global</update_domain>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>content_css_efd550a80f2a020094f3c09ce1050ecf</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="content_css"><content_css action="INSERT_OR_UPDATE"><name>snd_xplore</name><style>/*-----------------------------------&#13;
        CODEMIRROR OVERRIDES&#13;
-----------------------------------*/&#13;
.CodeMirror {&#13;
    line-height: 1.1em;&#13;
    border: 1px solid #ccc;&#13;
    box-sizing: content-box;&#13;
}&#13;
.CodeMirror-gutter {&#13;
    min-width: 3em;&#13;
}&#13;
.cm_active_line {&#13;
    background: #e8f2fe !important;&#13;
    width: 100%&#13;
}&#13;
.cm_error {&#13;
    background: transparent url(/images/icons/error_12x12.jpgx) no-repeat scroll top left;&#13;
}&#13;
.cm_warning {&#13;
    background: transparent url(/images/icons/warning_12x12.gifx) no-repeat scroll top left;&#13;
}&#13;
.codemirror .cm_error {&#13;
    background: transparent url(/images/icons/error_12x12.jpgx) no-repeat scroll top left;&#13;
}&#13;
.codemirror .cm_warning {&#13;
    background: transparent url(/images/icons/warning_12x12.gifx) no-repeat scroll top left;&#13;
}&#13;
.CodeMirror div {&#13;
    line-height: 1.2em;&#13;
    font-family: Menlo, Consolas, monospace;&#13;
    font-size: 12px;&#13;
}&#13;
.outputmsg_error_fullscreen {&#13;
    position: fixed;&#13;
    bottom: 0px;&#13;
    z-index: 1000;&#13;
}&#13;
.cm_unfold {&#13;
    background: transparent url(/images/icons/filter_hide_12x12.gifx) no-repeat scroll top left;&#13;
}&#13;
.cm_fold {&#13;
    background: transparent url(/images/icons/filter_reveal_12x12.gifx) no-repeat scroll top left;&#13;
}&#13;
.CodeMirror-gutter {&#13;
    cursor: pointer;&#13;
    min-width: 4.0em;&#13;
}&#13;
.CodeMirror-gutter-text pre {&#13;
    padding-left: 20px;&#13;
    text-align: right;&#13;
}&#13;
.CodeMirror-selected {&#13;
    background: #d9d9d9;&#13;
}&#13;
.CodeMirror-focused .CodeMirror-selected {&#13;
    background: #d7d4f0;&#13;
}&#13;
.CodeMirror pre {&#13;
    background-color: transparent;&#13;
}&#13;
&#13;
/*-----------------------------------&#13;
              XPLORE&#13;
-----------------------------------*/&#13;
&#13;
body {&#13;
  font-size: 12px;&#13;
}&#13;
pre {&#13;
  font-size: 11px;&#13;
}&#13;
&#13;
.wrap-pre pre {&#13;
  /* Make Pre tags wrap nicely. Better than having to scroll right for 10000 chars */&#13;
  white-space: pre-wrap;      /* CSS 3 */&#13;
  white-space: -moz-pre-wrap; /* Mozilla, since 1999 */&#13;
  white-space: -pre-wrap;     /* Opera 4-6 */&#13;
  white-space: -o-pre-wrap;   /* Opera 7 */&#13;
  word-wrap: break-word;      /* Internet Explorer 5.5+ */&#13;
}&#13;
&#13;
h5 {&#13;
  font-weight: bold;&#13;
  margin-top: 18px;&#13;
}&#13;
&#13;
#wrapper {&#13;
  overflow: hidden;&#13;
  position: absolute;&#13;
  top: 206px;&#13;
  left: 0;&#13;
  right: 0;&#13;
  bottom: 0;&#13;
  -webkit-box-sizing: border-box;&#13;
  -moz-box-sizing: border-box;&#13;
  box-sizing: border-box;&#13;
}&#13;
&#13;
@media (min-width: 768px) {&#13;
  #wrapper {&#13;
    top: 50px;&#13;
  }&#13;
}&#13;
&#13;
.navbar-nav {&#13;
  margin: 0;&#13;
}&#13;
&#13;
.label-as-badge {&#13;
  border-radius: 1em;&#13;
}&#13;
sup .label-as-badge {&#13;
  padding-bottom: 0.2em;&#13;
}&#13;
&#13;
#side_controls {&#13;
  position: absolute;&#13;
  width: 40px;&#13;
  background: #ecedef;&#13;
  top: 0;&#13;
  bottom: 0;&#13;
  left: 0;&#13;
  border-right: 1px solid #e6e6e6;&#13;
}&#13;
&#13;
#side_controls ul {&#13;
  width: 100%;&#13;
  list-style: none;&#13;
  margin: 0;&#13;
  padding: 0;&#13;
}&#13;
&#13;
#side_controls &gt; ul &gt; li {&#13;
  text-align: center;&#13;
  border-bottom: 1px solid #e0e0e0;&#13;
}&#13;
&#13;
#side_controls &gt; ul &gt; li &gt; a {&#13;
  font-weight: bold;&#13;
  color: #333;&#13;
  text-decoration: none;&#13;
  display: block;&#13;
  position: relative;&#13;
  padding: 15px 0;&#13;
  -webkit-transition: all ease-in 300ms;&#13;
  -moz-transition: all ease-in 300ms;&#13;
  -ms-transition: all ease-in 300ms;&#13;
  -o-transition: all ease-in 300ms;&#13;
  transition: all ease-in 300ms;&#13;
}&#13;
&#13;
#side_controls ul &gt; li &gt; a.active {&#13;
  background: #f9f9f9;&#13;
}&#13;
&#13;
.side_pane {&#13;
  height: 100%;&#13;
  padding: 20px 10px 10px 10px;&#13;
  z-index: 10;&#13;
  position: absolute;&#13;
  left: 40px;&#13;
  top: 0;&#13;
  width: 25%;&#13;
  overflow: auto;&#13;
  background: #f9f9f9;&#13;
  border-right: 1px solid #ccc;&#13;
}&#13;
&#13;
.side_pane ul {&#13;
  list-style-type: square;&#13;
  margin-left: 0;&#13;
  padding-left: 20px;&#13;
}&#13;
&#13;
#workbench {&#13;
  position: absolute;&#13;
  top: 0;&#13;
  left: 40px;&#13;
  right: 0;&#13;
  bottom: 0;&#13;
}&#13;
&#13;
#editor {&#13;
  position: absolute;&#13;
  right: 60%;&#13;
  width: 40%;&#13;
  top: 0;&#13;
  left: 0;&#13;
  bottom: 0;&#13;
  min-width: 100px;&#13;
  border-right: 1px solid #ccc;&#13;
  z-index: 5;&#13;
  background: #fff;&#13;
}&#13;
&#13;
#editor .CodeMirror,&#13;
#editor .CodeMirror-scroll  {&#13;
  height: 100%;&#13;
}&#13;
&#13;
.ui-resizable-handle {&#13;
  position: absolute;&#13;
  font-size: 0.1px;&#13;
  display: block;&#13;
}&#13;
&#13;
.ui-resizable-e {&#13;
  width: 7px;&#13;
  right: -5px;&#13;
  top: 0;&#13;
  height: 100%;&#13;
  cursor: col-resize;&#13;
}&#13;
&#13;
#output {&#13;
  position: absolute;&#13;
  left: 40%;&#13;
  bottom: 0;&#13;
  top: 0;&#13;
  right: 0;&#13;
  background: #fff;&#13;
  overflow: hidden;&#13;
}&#13;
&#13;
#output_content {&#13;
  bottom: 0;&#13;
  left: 0;&#13;
  overflow: hidden;&#13;
  position: absolute;&#13;
  right: 0;&#13;
  top: 0;&#13;
}&#13;
&#13;
#output_tabs {&#13;
  background-color: #f5f5f5;&#13;
}&#13;
&#13;
#output_tabs_pane {&#13;
  position: absolute;&#13;
  top: 40px;&#13;
  left: 0;&#13;
  right: 0;&#13;
  bottom: 0;&#13;
  overflow: auto;&#13;
}&#13;
&#13;
#script_output_tab {&#13;
  padding-top: 10px;&#13;
}&#13;
&#13;
.monospace {&#13;
  font-family: monaco, courier;&#13;
}&#13;
&#13;
.list-example {&#13;
  max-width: 400px;&#13;
}&#13;
&#13;
.tab-pane {&#13;
  padding: 0 15px;&#13;
}&#13;
&#13;
.tab-pane h4 {&#13;
  text-align: left;&#13;
  text-transform: uppercase;&#13;
  border-bottom: 1px solid #ccc;&#13;
}&#13;
.tab-pane .wrap {&#13;
  background-color: #f8f8f8;&#13;
  border: #c4c4c4 1px solid;&#13;
  padding: 15px 0;&#13;
  margin: 15px 0;&#13;
}&#13;
&#13;
#system_log_pane {&#13;
  padding: 0;&#13;
}&#13;
&#13;
#regex_pane .slash {&#13;
  float: left;&#13;
  font-size: large;&#13;
  font-weight: bold;&#13;
  display: block;&#13;
  width: 20px;&#13;
  text-align: center;&#13;
  padding: 5px 0;&#13;
  color: #9a9a9a;&#13;
}&#13;
#regex_expression input {&#13;
  float: left;&#13;
  padding: 4px;&#13;
}&#13;
#regex_pane .regex-options {&#13;
  float: right;&#13;
  width: 70px;&#13;
}&#13;
#regex_options {&#13;
  width: 50px;&#13;
  float: left;&#13;
}&#13;
#regex_pane .regex-expression {&#13;
  padding: 0 70px 0 20px;&#13;
}&#13;
#regex {&#13;
  width: 100%;&#13;
}&#13;
#regex_pane textarea {&#13;
  border: 0;&#13;
  padding: 4px;&#13;
  background: transparent;&#13;
}&#13;
#regex_match, #regex_group {&#13;
  white-space: pre-wrap;&#13;
  word-wrap: break-word;&#13;
}&#13;
#regex_match .bg-success {&#13;
  padding: 2px;&#13;
  color: #066;&#13;
  background-color: #cef;&#13;
}&#13;
&#13;
.page_loader {&#13;
  background-color: rgba(255, 255, 255, 0.9);&#13;
  bottom: 0;&#13;
  display: none;&#13;
  left: 0;&#13;
  position: absolute;&#13;
  right: 0;&#13;
  text-align: center;&#13;
  top: 0;&#13;
  z-index: 50;&#13;
}&#13;
&#13;
.page_loader .loading {&#13;
  bottom: 0;&#13;
  color: #1a1d1d;&#13;
  left: 0;&#13;
  margin: -4rem auto 0;&#13;
  position: absolute;&#13;
  right: 0;&#13;
  text-align: center;&#13;
  top: 50%;&#13;
}&#13;
&#13;
.page_loader .loading i {&#13;
  font-size: 5rem;&#13;
  line-height: 5rem;&#13;
  text-shadow:rgba(255, 255, 255, 0.75) 0 0 0 0.5em;&#13;
}&#13;
&#13;
.page_loader.active {&#13;
  display: block;&#13;
}&#13;
&#13;
#countup {&#13;
  margin-top: 15px;&#13;
}&#13;
&#13;
#output .breadcrumb {&#13;
  margin-bottom: 0;&#13;
}&#13;
&#13;
#type_control {&#13;
  margin: 4px 0 4px 8px&#13;
}&#13;
&#13;
.nav .navbar-control {&#13;
  margin-left: 5px;&#13;
  margin-top: 8px;&#13;
  margin-bottom: 8px;&#13;
}&#13;
&#13;
.table pre {&#13;
  margin: 0;&#13;
}&#13;
&#13;
.log {&#13;
  background-color: #f3f3f3;&#13;
}&#13;
&#13;
.checkbox-inline.no_indent,&#13;
.checkbox-inline.no_indent+.checkbox-inline.no_indent {&#13;
  margin-left: 0;&#13;
  margin-right: 10px;&#13;
}&#13;
.checkbox-inline.no_indent:last-child {&#13;
  margin-right: 0;&#13;
}&#13;
&#13;
#script_pane_list {&#13;
  list-style: none;&#13;
  padding: 0;&#13;
  margin: 0;&#13;
}&#13;
#script_pane_list li {&#13;
  border-top: 1px solid #e9e9e9;&#13;
  padding: 2px 4px;&#13;
}&#13;
#script_pane_list li:hover {&#13;
  background-color: #e9e9e9;&#13;
  padding-left: 6px;&#13;
}&#13;
#script_pane_list li .script-link:hover {&#13;
  cursor: pointer;&#13;
  text-decoration: underline;&#13;
}&#13;
#script_pane_list li .script-replace {&#13;
  opacity: 0;&#13;
  -webkit-transition:all linear 200ms;&#13;
  -moz-transition:all linear 200ms;&#13;
  -ms-transition:all linear 200ms;&#13;
  -o-transition:all linear 200ms;&#13;
  transition: all linear 200ms;&#13;
}&#13;
#script_pane_list li:hover .script-replace {&#13;
  opacity: 1;&#13;
}&#13;
#script_pane_search {&#13;
  margin-bottom: 20px;&#13;
}&#13;
&#13;
.spin {&#13;
  animation: spin 900ms infinite linear;&#13;
  -o-animation: spin 900ms infinite linear;&#13;
  -ms-animation: spin 900ms infinite linear;&#13;
  -webkit-animation: spin 900ms infinite linear;&#13;
  -moz-animation: spin 900ms infinite linear;&#13;
}&#13;
@keyframes spin {&#13;
  100%{ transform: rotate(360deg); transform: rotate(360deg); }&#13;
}&#13;
@-o-keyframes spin {&#13;
  100%{ -o-transform: rotate(360deg); transform: rotate(360deg); }&#13;
}&#13;
@-ms-keyframes spin {&#13;
  100%{ -ms-transform: rotate(360deg); transform: rotate(360deg); }&#13;
}&#13;
@-webkit-keyframes spin {&#13;
  100%{ -webkit-transform: rotate(360deg); transform: rotate(360deg); }&#13;
}&#13;
@-moz-keyframes load-spin {&#13;
  100%{ -moz-transform: rotate(360deg); transform: rotate(360deg); }&#13;
}&#13;
&#13;
/* Fix spin offset */&#13;
.glyphicon-refresh.spin {&#13;
  padding-top: 1px;&#13;
}&#13;
.loading&gt;.glyphicon-refresh.spin {&#13;
  padding-left: 1px;&#13;
}&#13;
&#13;
/* Adjust for BootstrapToggle */&#13;
.checkbox, .radio {&#13;
  margin-top: 15px;&#13;
  margin-bottom: 15px;&#13;
}&#13;
#settings_pane .checkbox label {&#13;
  padding-left: 12px;&#13;
}&#13;
&#13;
/* fix IE select */&#13;
select::-ms-expand {&#13;
  display: none;&#13;
}&#13;
&#13;
/* Google Code-Prettify Fix */&#13;
li.L0, li.L1, li.L2, li.L3,&#13;
li.L5, li.L6, li.L7, li.L8&#13;
{ list-style-type: decimal !important }</style><sys_class_name>content_css</sys_class_name><sys_created_by>james@thewhitespace.io</sys_created_by><sys_created_on>2015-09-13 14:58:52</sys_created_on><sys_customer_update>true</sys_customer_update><sys_id>efd550a80f2a020094f3c09ce1050ecf</sys_id><sys_mod_count>84</sys_mod_count><sys_name>snd_xplore</sys_name><sys_package display_value="Global" source="global">global</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="[ws] Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</sys_scope><sys_update_name>content_css_efd550a80f2a020094f3c09ce1050ecf</sys_update_name><sys_updated_by>james@thewhitespace.io</sys_updated_by><sys_updated_on>2017-05-20 22:21:53</sys_updated_on><type>local</type><url/></content_css></record_update>]]></payload>
<payload_hash/>
<remote_update_set display_value="[ws] Xplore: Developer Toolkit - 4.5">c1bde016dbdc8e10b0fa3fd3e296194c</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>kyle.stinar@continuant.com</sys_created_by>
<sys_created_on>2024-02-13 17:49:24</sys_created_on>
<sys_id>c5bde016dbdc8e10b0fa3fd3e296194c</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1628c66dfd80000000</sys_recorded_at>
<sys_updated_by>kyle.stinar@continuant.com</sys_updated_by>
<sys_updated_on>2024-02-13 17:49:24</sys_updated_on>
<table/>
<target_name>snd_xplore</target_name>
<type>Style Sheet</type>
<update_domain>global</update_domain>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_app_module_a121541edb08d700b1307b5b8c9619ec</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_app_module"><sys_app_module action="INSERT_OR_UPDATE"><active>true</active><application display_value="[ws] Xplore: Developer Toolkit">4eb000280f2a020094f3c09ce1050e23</application><assessment/><content_page/><device_type/><filter/><hint/><homepage/><image/><link_type>DIRECT</link_type><map_page/><mobile_title>Properties</mobile_title><mobile_view_name>Mobile</mobile_view_name><name/><order>9000</order><override_menu_roles>false</override_menu_roles><query>system_properties_ui.do?sysparm_title=Xplore Settings%20Properties&amp;sysparm_category=Xplore Settings</query><report/><roles>admin</roles><survey/><survey_overwrite>true</survey_overwrite><sys_class_name>sys_app_module</sys_class_name><sys_created_by>james@thewhitespace.io</sys_created_by><sys_created_on>2018-02-04 23:26:14</sys_created_on><sys_customer_update>true</sys_customer_update><sys_domain>global</sys_domain><sys_domain_path>/</sys_domain_path><sys_id>a121541edb08d700b1307b5b8c9619ec</sys_id><sys_mod_count>1</sys_mod_count><sys_name>Properties</sys_name><sys_overrides/><sys_package display_value="[ws] Xplore: Developer Toolkit" source="0f6ab99a0f36060094f3c09ce1050ee8">0f6ab99a0f36060094f3c09ce1050ee8</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="[ws] Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</sys_scope><sys_update_name>sys_app_module_a121541edb08d700b1307b5b8c9619ec</sys_update_name><sys_updated_by>james@thewhitespace.io</sys_updated_by><sys_updated_on>2018-02-04 23:26:51</sys_updated_on><timeline_page/><title>Properties</title><uncancelable>false</uncancelable><view_name/><window_name/></sys_app_module></record_update>]]></payload>
<payload_hash/>
<remote_update_set display_value="[ws] Xplore: Developer Toolkit - 4.5">c1bde016dbdc8e10b0fa3fd3e296194c</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>kyle.stinar@continuant.com</sys_created_by>
<sys_created_on>2024-02-13 17:49:24</sys_created_on>
<sys_id>c9bde016dbdc8e10b0fa3fd3e296194d</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1628c66dfd80000000</sys_recorded_at>
<sys_updated_by>kyle.stinar@continuant.com</sys_updated_by>
<sys_updated_on>2024-02-13 17:49:24</sys_updated_on>
<table/>
<target_name>Properties</target_name>
<type>Module</type>
<update_domain>global</update_domain>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>db_image_9b437ef80f81aa0094f3c09ce1050ebf</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="db_image"><db_image action="INSERT_OR_UPDATE"><active>true</active><category/><format>png</format><height>48</height><image/><name>ws_logo_Xplore_48.png</name><size_bytes>2964</size_bytes><sys_class_name>db_image</sys_class_name><sys_created_by>james@thewhitespace.io</sys_created_by><sys_created_on>2016-08-02 23:53:22</sys_created_on><sys_customer_update>true</sys_customer_update><sys_id>9b437ef80f81aa0094f3c09ce1050ebf</sys_id><sys_mod_count>5</sys_mod_count><sys_name>ws_logo_Xplore_48.png</sys_name><sys_package display_value="[ws] Xplore: Developer Toolkit" source="0f6ab99a0f36060094f3c09ce1050ee8">0f6ab99a0f36060094f3c09ce1050ee8</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="[ws] Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</sys_scope><sys_update_name>db_image_9b437ef80f81aa0094f3c09ce1050ebf</sys_update_name><sys_updated_by>james@thewhitespace.io</sys_updated_by><sys_updated_on>2017-05-20 22:21:54</sys_updated_on><thumbnail/><width>48</width></db_image><sys_attachment action="INSERT_OR_UPDATE"><average_image_color/><compressed>true</compressed><content_type>image/png</content_type><file_name>image</file_name><image_height/><image_width/><size_bytes>2964</size_bytes><size_compressed>2987</size_compressed><sys_created_by>james@sndeveloper.com</sys_created_by><sys_created_on>2017-05-16 10:09:06</sys_created_on><sys_id>aef639490ff2324094f3c09ce1050ef2</sys_id><sys_mod_count>0</sys_mod_count><sys_updated_by>james@sndeveloper.com</sys_updated_by><sys_updated_on>2017-05-16 10:09:06</sys_updated_on><table_name>ZZ_YYdb_image</table_name><table_sys_id>9b437ef80f81aa0094f3c09ce1050ebf</table_sys_id></sys_attachment><sys_attachment_doc action="INSERT_OR_UPDATE"><data>H4sIAAAAAAAAAA==</data><length>16</length><position>0</position><sys_attachment display_value="image" sys_id="aef639490ff2324094f3c09ce1050ef2">aef639490ff2324094f3c09ce1050ef2</sys_attachment><sys_created_by>james@sndeveloper.com</sys_created_by><sys_created_on>2017-05-16 10:09:06</sys_created_on><sys_id>eef639490ff2324094f3c09ce1050ef2</sys_id></sys_attachment_doc><sys_attachment_doc action="INSERT_OR_UPDATE"><data>AZQLa/SJUE5HDQoaCgAAAA1JSERSAAAAMAAAADAIBgAAAFcC+YcAAAAJcEhZcwAAN10AADddARmARl0AAAAHdElNRQfhBRAKCBfPqDBxAAAAB3RFWHRBdXRob3IAqa7MSAAAAAx0RVh0RGVzY3JpcHRpb24AEwkhIwAAAAp0RVh0Q29weXJpZ2h0AKwPzDoAAAAOdEVYdENyZWF0aW9uIHRpbWUANfcPCQAAAAl0RVh0U29mdHdhcmUAXXD/OgAAAAt0RVh0RGlzY2xhaW1lcgC3wLSPAAAACHRFWHRXYXJuaW5nAMAb5ocAAAAHdEVYdFNvdXJjZQD1/4PrAAAACHRFWHRDb21tZW50APbMlr8AAAAGdEVYdFRpdGxlAKju0icAAApfSURBVGiBzZp5kFXFFcZ/fZd373uzweysAyKCMEACFRFXRFNYSZDFIiWIiVYRTVQUkgjEuMVKGUghRdRYZUy0SsAyUdBRIEZUxFLMRLYIgWGGdRi2GebN+ta7dP4YhjC8e988GEzyVb0/Xt/b3d/X9/Tpc7pbSCk5F2JhRbYZKLgVx/4ekmuRbpkAHbq+99+ABBchGhHKLoS23nXtNYklE4904XuugODij+ej6ouVQKgE10ZaCXCs/zrxLlAU0AyEbuLGoxbSWhb7zU2Pdj4+KyC46KOVSnbBHBlvAzsBiP8VZR9IUHREVm/ctoZVsaU33wWgAAQXfvCMklM0R7aHwU7y/0ceQIBrI9tOo+QUzgku3PgQgDAWbuonFFErQMG1L7p5V0qStkTaDridZtk5EGf+KwKhqRiaQIgeDJIWQDpWc7xN6a8JrDuUYIEiI2EuZuTjtotM2KCrDCkMUd4nm2FFIfrmmeSYKkhoS9jUtSSoro+y+0QbBxtjYDkohoahKRcuwE6gZOX3Mp3wZA0ppkgrfsHk41YH8YElWcwcU8a0UUWM7Z9LKKCmrRdJOmw72srbu+p565+nqKuPoJgapqZcgJ8T4NggmCbMRzY2CkXNR7oZVZVSEo9a9C0I8fObBnHP+L70CuoZd30uwlGLP/69juWbjnCqKYYZCpCxZak60k4eEsGFH2YkXABJx8VOONw9oT9LpgylJMe4KOLn41hLnIXvVvN65XE0UyWgZvY1pMTJyAAFELMchISX7yzn1dnll4w8QL88k9V3jeaFO0YiHUnccjMyaCFQuxUggLjlEFQV3rt3LHOv7t9zxj544LoBrJ37TXQFEhmK6FaA5bgowNq532DysIKes+wGt40s4s93j8F1XSyne0NKK0ACVtzmhZkjmDys8FJx7BZTy4t5dvpwrJjV7VzwFSCAeMTi+1f1474JX5/Z+GHBjWVMGduHeMRKa0q+ApK2S0GewYppw7rtrC1u0550MiImpaQ5mlmA+Pz0YeRm61iOv4v3FWDHbeZPLKNPrr+32X86yu2v7OSKZz6j7InNrN/TkJZQW8JmwnNfMvjpTxm37AtWbz+R9v2y/CD3Xz8QK+Yf4ngKSDouhflBfnKNv+k0tCe55cWtrP38KKejNq6U/wmBfCAlOK4k7ki2729izss7WLktvYh51w0kL9fwndCeApy4w7RRRRRkBXwbXlBRzZFDzUwa14e9i66h9umJTBlZlJZMrqlROf8qDj9+PctnjQRg/pq91LXEfev0zTP47sgi7IT3V0gRIAEUwYxRJb6Nvr2rntWf1ZJXksWrs8q5vChEjpE+BjrboRCU5BosuLGMmRP6Ez7ezoNrq9LWmTG62L+98wssx6Wol8H4sjzPCo0Ri3lr9oLtsnTqMAb2NjMi7oXnpg2jqH8OFV8cY+VWf1O6ZlAvXzNKEeBYLsOLs8gPeQdoC97dx7HDLUz+Vt8eu9fSXIMVM64EAT99u4rjrQnP9/rkGgwtDGLbqd4odQ64kiGFIc+GKnbXs/LTWvqV5bHqzvIeke/E7LGl3DNpEKdPtjMvjSldVhACD3eqpZRIKM1Jnbyn2pLMW1uF0BWMgMqDa6pInDciEnBdSUhXeeH24RRmd7Tz2Ib97KhrJXAm5j93YRICmmM2gd4ma7ce5/XRJcweW5rSf2lOwHNjJFUAkiyPpKSytpmj9RG0kM7BE+0cPNKcWhUBugKuJO64DOhlYmgKyz850pG1WS6eLFQFEdIBwQdVpz0FeHHyEYCnPxcIsCXjB+Ty2LcvQ3q9I+DFz+vYsLueim0nIGqBrqDkGAwoyeb5GcPQPQJgIWDjvjDL11V7Pvfj5CNA0BpP9blCAI6kX57BrcP9A7u/VYVxohZjhubzo6v780F1I+/uOEkooHBbub87bI05YLu+GZkXJ/CaxALPhUVKCQLsbpZb23Ug6fDwDWU8cN0AXpo5Ai2gYrmSpIcX6UTcdkAIzt8p7ERdS8Jz2U0t0hRqGqIpxQG1wwbjVvrcOWa5HanSmZGUUqJpClHLxfEh1yHABSkJeOxSOK7kwOkoeDxLKdE1heqGKLVNXb/C5YVB1Gyd7XVtRNJEnlsOt0BQ44riDldcmKVT1tvkZEOE3SfafettPtAEwPDirJRnBxpjHGyMEvCYHyklmiJob0uebbATQwpD3Di0gJNHW3ny/QOeJJZ9cpi9B8KMHNSLcf1zAdBVhRmjipERi0fX7/dMUD6uCfPm1uOYhSHPeGpTTZh41EJVUieIql/7g6fOL7QdFwuYPbZPl/LhxVm8suMEW/Y1Uh+zGVwQxNQV6prjLNt0mCfW1QDwypxRXFmSfbbemL45vFF1mp1VjVSebGdIQZA8UyMctVi97QRz3/gXsaY4j912BdM8JvqidTUcCsfQPUzIc1vFcSVCws6FE1I+6es7TnLPql0kwzFEfpDSnACnIxZWYxSyA/xu5ggeun5gSkfb61qZ/qcd1B5ugZwApb2DRJMOrQ1RUAX33jKYl2aOSKm341gbVz37BYqmoHq4KM8voAhBPGYRcWTKiIzqk83UUcVEFEFTxKI5ZpMf1Jk8poQ/zCpn5hjvKLZPrsHscX2RhkpT3KGhPYmhKVw9tICl04ez+ObBnvXmv7OPXbWtBHwWMt+NLUdKHMvl8wXjGT/QOzKNWQ4tUZtsUyXb8FwTPeG48qyA3j5BI8An+5uY9Pw/CBgqis8C4ZtSakLguJIf/2UPSZ+cNKirlOYZF0QeQFUEpblGWvLRpMP9b+1BCnzJQxoBEgiaGjsPNfPgmvQJx9eB+97cw96jrQS7GZxuN7bMrAAvbz7CrzcevGTkusMvN9SwaksdZrZ/StuJ7rcWBQRCOo9XVPMrH/9/KfGLdTU8s2E/RpZ+abYWocNmA0GNp96r5oerd9Pmk2D3BE0xi1mvfcWSv+7HCOlp7f5cKFJmdjCgKgIzO8BrW44yfnklG7rZA7oQVOyqZ/zySt6oPIaZHciYvES6wnzkw4NC0wbjZD6qsYQNEqaOLubhG8q4aWj+RRH/cF8jKzYfYf3uBlAFoYCa+SmNoiAdJ6yB/EzowcHSacu446Ch4UpJxc5TVOxqYPygPKaMLGLS0HyuLMnyPbEJRy2qTkX4qCbMe7vr+bK2BVyJaeoIcYFH6ZoBbuwrDUV9B1W7i5RsNT0UIQiGdFwpqTzcTOX+MARU+uWZDOhlUJpjkGtqSDqSkZNtCY42xTt2HpIOaCpmQMv8SKkLJEI3kcnIOsH9m7LMHLdOqHqvjjPii4crJZYjcR23Iwc897RVESiqgq6KjG3cF4qGBFe6cqAifz8xgus8KcxcenrArQiBoQ==</data><length>3736</length><position>1</position><sys_attachment display_value="image" sys_id="aef639490ff2324094f3c09ce1050ef2">aef639490ff2324094f3c09ce1050ef2</sys_attachment><sys_created_by>james@sndeveloper.com</sys_created_by><sys_created_on>2017-05-16 10:09:06</sys_created_on><sys_id>22f639490ff2324094f3c09ce1050ef3</sys_id></sys_attachment_doc><sys_attachment_doc action="INSERT_OR_UPDATE"><data>KQQNjWBQJxg68wvqBM8cqfaYPAKR1RucxNL40onHul41yCmaIyNN4Fo9FnPpITvuTJg5uO2NZ68adL3ssWjTM2jazxQjKyCteMedCTez49evDaqO0E1QVNxk9BSOsyS2ZOKKzsfi/CTaWPx+maJk3w7Od3Cd0UhZIDJc8C4tBBIshHoYIbegauviycb35W+ndslL/w3UZDUzuaDJWgAAAABJRU5ErkJggicFLyGUCwAA</data><length>236</length><position>2</position><sys_attachment display_value="image" sys_id="aef639490ff2324094f3c09ce1050ef2">aef639490ff2324094f3c09ce1050ef2</sys_attachment><sys_created_by>james@sndeveloper.com</sys_created_by><sys_created_on>2017-05-16 10:09:06</sys_created_on><sys_id>62f639490ff2324094f3c09ce1050ef3</sys_id></sys_attachment_doc></record_update>]]></payload>
<payload_hash/>
<remote_update_set display_value="[ws] Xplore: Developer Toolkit - 4.5">c1bde016dbdc8e10b0fa3fd3e296194c</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>kyle.stinar@continuant.com</sys_created_by>
<sys_created_on>2024-02-13 17:49:24</sys_created_on>
<sys_id>cdbde016dbdc8e10b0fa3fd3e296194c</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1628c66dfd80000000</sys_recorded_at>
<sys_updated_by>kyle.stinar@continuant.com</sys_updated_by>
<sys_updated_on>2024-02-13 17:49:24</sys_updated_on>
<table/>
<target_name>ws_logo_Xplore_48.png</target_name>
<type>Images</type>
<update_domain>global</update_domain>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_script_include_c1589f640f01aa0094f3c09ce1050e0e</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;global.snd_Xplore_spec&lt;/api_name&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description&gt;Spoke specification for snd_Xplore&lt;/description&gt;&lt;name&gt;snd_Xplore_spec&lt;/name&gt;&lt;script&gt;&lt;![CDATA[/*!
  Spoke specification for snd_Xplore
*/
describe('Xplore - the wonder tool', function () {
  
  if (typeof snd_Xplore !== 'function') {
    fail('snd_Xplore was not found.');
  }

  describe('ObjectReporter', function () {
    beforeEach(function () {
      this.reporter = new snd_Xplore.ObjectReporter();
    });

    it('can return the report object', function () {
      expect(this.reporter.report).toBeDefined();
      expect(this.reporter.getReport()).toBe(this.reporter.report);
    });

    it('has a begin method for starting the reporter', function () {
      this.reporter.begin({
        type: 'begin#type',
        value: 'begin#value',
        string: 'begin#string'
      });
      var report = this.reporter.report;
      expect(report.status).toBe('started');
      expect(report.type).toBe('begin#type');
      expect(report.value).toBe('begin#value');
      expect(report.string).toBe('begin#string');
    });

    it('has a result method for capturing results', function () {
      var obj = {};
      this.reporter.result(obj);
      expect(this.reporter.report.results).toContain(obj);
    });

    it('has a complete method for finishing the reporter', function () {
      this.reporter.complete();
      expect(this.reporter.report.status).toBe('finished');
    });
  });

  describe('Xplore utilities and helpers', function () {
    describe('dotwalk', function () {
      it('can be used for navigating objects from paths, i.e. the Xplore breadcrumb', function () {
        var obj = {
          child: {
            text: 'foo'
          }
        };
        expect(typeof snd_Xplore.dotwalk).toBe('function');
        expect(snd_Xplore.dotwalk(obj, 'child.text')).toBe('foo');
      });
    });

    describe('getLogs', function () {
      gs.debug('__debug__', 'snd_Xplore_spec');
      gs.info('__info__', 'snd_Xplore_spec');
      gs.warn('__warn__', 'snd_Xplore_spec');
      gs.error('__error__', 'snd_Xplore_spec');
      gs.sleep(100); // allow the database write to work
      
      var logs = snd_Xplore.getLogs();
      
      it('can retrieve logs that occured in the current minute', function () {
        expect(logs.length).toBeGreaterThan(1);
      });

      describe('log properties', function () {
        it('each log has a created property', function () {
          expect(logs[0].created).toBeTruthy();
        });

        it('each log has a level property', function () {
          expect(logs[0].level).toBeTruthy();
        });

        it('each log has a message property', function () {
          expect(logs[0].message).toBeTruthy();
        });

        it('each log has a source property', function () {
          expect(logs[0].source).toBeTruthy();
        });
      });

      describe('logs retrieved', function () {
        var log_messages = [];
        for (var i = 0; i &lt; logs.length; i++) {
          log_messages.push(logs[i].message);
        }

        it('does not get debug logs', function () {
          expect(log_messages).not.toContain('__debug__');
        });

        it('does not get info logs', function () {
          expect(log_messages).not.toContain('__info__');
        });
        
        it('does get warning logs', function () {
          expect(log_messages).toContain('__warn__');
        });

        it('does get error logs', function () {
          expect(log_messages).toContain('__error__');
        });
      });
    });

    describe('getOutputMessages', function () {
      it('can capture gs.addInfoMessage and gs.addErrorMessage', function () {
        gs.addInfoMessage('Testing Xplore');
        gs.addErrorMessage('Testing Xplore');
        
        var logs = snd_Xplore.getOutputMessages();
        var found = 0;
        for (var i = 0; i &lt; logs.length; i++) {
          if ((logs[i].type == 'error' || logs[i].type == 'info') &amp;&amp; logs[i].message == 'Testing Xplore') {
            found++;
          }
        }
        expect(found).toBe(2);
      });

      it('flushes the messages once they have been captured', function () {
        expect(snd_Xplore.getOutputMessages().length).toBe(0);
      });

      it('can capture log messages (when session debug is enabled)', function () {
        var transaction = GlideTransaction.get();
        GlideSessionDebug.enable(transaction);

        gs.debug('Testing Xplore');

        var messages = snd_Xplore.getOutputMessages();
        expect(messages.length).toBe(1);
        expect(messages[0].type).toBe('log');
        expect(messages[0].message).toContain('Testing Xplore');

        GlideSessionDebug.disable(transaction);
      });

    });
  });

  describe('PrintReporter');

  describe('PrettyPrinter');

  describe('object exploration using snd_Xplore', function () {
    it('has a print reporter', function () {
      var transaction = GlideTransaction.get();
      GlideSessionDebug.enable(transaction);
           
      // this is where a spy would be useful
      var xplore = new snd_Xplore();
      xplore.xplore({foo: 'bar'});

      var messages = snd_Xplore.getOutputMessages();
      
      // begin, result, complete
      expect(messages.length).toBe(3);

      GlideSessionDebug.disable(transaction);
    });

    it('has an object reporter', function () {

      var xplore = new snd_Xplore();
      xplore.xplore({foo: 'bar'}, 'snd_Xplore.ObjectReporter');

      var result = xplore.reporter.getReport();
      expect(typeof result).toBe('object');
      expect(result.results.length).toBe(1);

    });
  });

});]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;james@thewhitespace.io&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2016-08-02 07:57:34&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;true&lt;/sys_customer_update&gt;&lt;sys_id&gt;c1589f640f01aa0094f3c09ce1050e0e&lt;/sys_id&gt;&lt;sys_mod_count&gt;28&lt;/sys_mod_count&gt;&lt;sys_name&gt;snd_Xplore_spec&lt;/sys_name&gt;&lt;sys_package display_value="[ws] Xplore: Developer Toolkit" source="0f6ab99a0f36060094f3c09ce1050ee8"&gt;0f6ab99a0f36060094f3c09ce1050ee8&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="[ws] Xplore: Developer Toolkit"&gt;0f6ab99a0f36060094f3c09ce1050ee8&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_c1589f640f01aa0094f3c09ce1050e0e&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;james@thewhitespace.io&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2017-05-20 22:21:54&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash/>
<remote_update_set display_value="[ws] Xplore: Developer Toolkit - 4.5">c1bde016dbdc8e10b0fa3fd3e296194c</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>kyle.stinar@continuant.com</sys_created_by>
<sys_created_on>2024-02-13 17:49:24</sys_created_on>
<sys_id>d1bde016dbdc8e10b0fa3fd3e296194f</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1628c66dfd80000000</sys_recorded_at>
<sys_updated_by>kyle.stinar@continuant.com</sys_updated_by>
<sys_updated_on>2024-02-13 17:49:24</sys_updated_on>
<table/>
<target_name>snd_Xplore_spec</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_properties_category_439d0cdadb08d700b1307b5b8c9619a2</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties_category"><sys_properties_category action="INSERT_OR_UPDATE"><name>Xplore Settings</name><sys_class_name>sys_properties_category</sys_class_name><sys_created_by>james@thewhitespace.io</sys_created_by><sys_created_on>2018-02-04 23:10:52</sys_created_on><sys_customer_update>true</sys_customer_update><sys_id>439d0cdadb08d700b1307b5b8c9619a2</sys_id><sys_mod_count>0</sys_mod_count><sys_name>Xplore Settings</sys_name><sys_package display_value="[ws] Xplore: Developer Toolkit" source="0f6ab99a0f36060094f3c09ce1050ee8">0f6ab99a0f36060094f3c09ce1050ee8</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="[ws] Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</sys_scope><sys_update_name>sys_properties_category_439d0cdadb08d700b1307b5b8c9619a2</sys_update_name><sys_updated_by>james@thewhitespace.io</sys_updated_by><sys_updated_on>2018-02-04 23:10:52</sys_updated_on><title/></sys_properties_category><sys_translated_text action="delete_multiple" query="documentkey=439d0cdadb08d700b1307b5b8c9619a2"/></record_update>]]></payload>
<payload_hash/>
<remote_update_set display_value="[ws] Xplore: Developer Toolkit - 4.5">c1bde016dbdc8e10b0fa3fd3e296194c</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>kyle.stinar@continuant.com</sys_created_by>
<sys_created_on>2024-02-13 17:49:24</sys_created_on>
<sys_id>d5bde016dbdc8e10b0fa3fd3e296194e</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1628c66dfd80000000</sys_recorded_at>
<sys_updated_by>kyle.stinar@continuant.com</sys_updated_by>
<sys_updated_on>2024-02-13 17:49:24</sys_updated_on>
<table/>
<target_name>Xplore Settings</target_name>
<type>System Property Category</type>
<update_domain>global</update_domain>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_ui_script_c9abed770f2a820094f3c09ce1050e7f</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ui_script"&gt;&lt;sys_ui_script action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;description&gt;The HTML Reporter for the Xplore UI&lt;/description&gt;&lt;global&gt;false&lt;/global&gt;&lt;name&gt;snd_xplore_reporter&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var snd_xplore_reporter = (function () {

  var showMoreButton = '&lt;button class="btn btn-xs btn-link show-more" ' +
      'data-show-more="false"&gt;&lt;span class="glyphicon glyphicon-expand"&gt;&lt;/span&gt; Show&lt;/button&gt;';

  function setDescription(table, result) {
    var type = result.type ? result.type : '*UNKNOWN*';
    table.empty().
    append('&lt;tr&gt;&lt;th class="col-md-1"&gt;Type&lt;/th&gt;&lt;td class="col-md-11"&gt;' + type +
        '&lt;/td&gt;&lt;/tr&gt;');
    if (!result.string) result.string = "";
    if (result.string.length &lt; 100 &amp;&amp; result.string.indexOf('\n') == '-1') {
      table.append('&lt;tr&gt;&lt;th class="col-md-1"&gt;Value&lt;/th&gt;&lt;td class="col-md-11"&gt;' +
          lineBreaks(prettyPrint(escapeHtml(result.string))) + '&lt;/td&gt;&lt;/tr&gt;');
    } else {
      //table.append('&lt;tr&gt;&lt;th class="col-md-1"&gt;Value&lt;/th&gt;&lt;td class="col-md-11"&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;');
      table.append('&lt;tr class="data-more"&gt;&lt;td colspan="2"&gt;' +
          '&lt;pre class="prettyprint linenums"&gt;' + escapeHtml(formatForPre(result.string)) +
          '&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;');
    }
  }

  function setResults(table, result) {
    table.prepend('&lt;tr&gt;' +
        '&lt;th class="col-md-3"&gt;Name&lt;/th&gt;' +
        '&lt;th class="col-md-3"&gt;Type&lt;/th&gt;' +
        '&lt;th class="col-md-6"&gt;Value&lt;/th&gt;&lt;/tr&gt;');
    $.each(result, function (i, item) {
      var prop = '&lt;a href="javascript:void(0)" class="interactive"&gt;' + item.name + '&lt;/a&gt;';
      if (item.type.toLowerCase() === 'function') {
        prop += ' &lt;a href="javascript:void(0)" class="interactive"&gt;&lt;span class="hidden"&gt;' +
            item.name + '&lt;/span&gt;()&lt;/a&gt;';
      }
      if (!item.string) item.string = "";
      if (item.string.length &amp;&amp; (item.string.length &gt;= 100 ||
          item.type.toLowerCase() == 'function' ||
          item.string.substr(0,8) == 'function')) {
        table.append('&lt;tr class="data-row"&gt;' +
          '&lt;td class="col-md-3 prop"&gt;' + prop + '&lt;/td&gt;' +
          '&lt;td class="col-md-3 type"&gt;' + item.type + '&lt;/td&gt;' +
          '&lt;td class="col-md-6"&gt;' + showMoreButton + '&lt;/td&gt;' +
        '&lt;/tr&gt;');
        table.append('&lt;tr class="data-more hidden"&gt;' +
          '&lt;td colspan="3" class="val"&gt;&lt;pre class="prettyprint linenums"&gt;' +
          escapeHtml(formatForPre(item.string)) + '&lt;/pre&gt;&lt;/td&gt;' +
        '&lt;/tr&gt;');
      } else {
        table.append('&lt;tr class="data-row"&gt;' +
          '&lt;td class="col-md-3 prop"&gt;' + prop + '&lt;/td&gt;' +
          '&lt;td class="col-md-3 type"&gt;' + item.type + '&lt;/td&gt;' +
          '&lt;td class="classol-md-6 val"&gt;' + prettyPrint(escapeHtml(item.string)) + '&lt;/td&gt;' +
        '&lt;/tr&gt;');
      }
    });
  }

  function displayResults(result, options) {

    displayOutputMessages(result.messages, options.html_messages);

    displayLogs(result.logs);

    setDescription($('#description_table'), result);

    var resultTable = $('#results_table');
    resultTable.empty().append('&lt;tr id="no_props" class="hidden"&gt;&lt;td colspan="3"&gt;' +
        'No properties to display.&lt;/td&gt;&lt;/tr&gt;');

    result.results.sort(function (a, b) {
      var ai = parseInt(a.name, 10);
      var bi = parseInt(b.name, 10);
      if (ai &gt; bi) return 1;
      if (bi &gt; ai) return -1;
      if (a.name &gt; b.name) return 1;
      if (b.name &gt; a.name) return -1;
      return 0;
    });

    if (result.results.length) {
      setResults(resultTable, result.results);
    } else {
      $('#no_props').removeClass('hidden');
    }

    showTypes();

    $('#result_container').toggleClass('hidden', !(result.type || result.results.length));
  }

  function displayOutputMessages(messages, asHtml) {
    var target = $('#message_table'),
        classMap = {
          'info': 'info',
          'error': 'danger',
          'access': 'warning',
          'log': 'log',
          '-1': 'log',
          '0': 'info',
          '1': 'warning',
          '2': 'danger'
        },
        script_update = false,
        temp;

    target.empty();
    if (!messages) {
      return;
    }
    for (var i = 0, m; i &lt; messages.length; i++) {
      m = messages[i];
      temp = m.message;
      if (classMap[m.type] == 'danger') {
        script_update = tryBlacklist(temp) || script_update;
      }
      if (!asHtml) {
        temp = escapeHtml(temp);
      }
      target.append('&lt;tr&gt;&lt;td class="' + classMap[m.type] + '"&gt;' +
          temp.replace('\n', '&lt;br&gt;') + '&lt;/td&gt;&lt;/tr&gt;');
    }

    if (script_update) {
      target.append('&lt;tr&gt;&lt;td class="info"&gt;Illegal property has been blacklisted. ' +
                    'Please try again.&lt;/td&gt;&lt;/tr&gt;');
    }

    $('#message_container').toggleClass('hidden', !i);
  }

  function tryBlacklist(text) {
    // text = 'Illegal access to field fInternalTZ in class com.glide.glideobject.GlideDateTime';
    var word = text.match(/Illegal access to field (\w+)/),
        current;
    if (word) {
      current = snd_xplore_editor.getValue();
      current = 'snd_Xplore.blacklist(\'' + word[1] + '\');\n' + current;
      snd_xplore_editor.setValue(current);
    }
    return !!word;
  }

  function htmlPre(text) {
    return text.replace(/\n(\s*)/g, function (a, b) {
      return '&lt;br /&gt;' + new Array(b.length + 1).join('&amp;nbsp;');
    });
  }

  function formatForPre(text) {
    var has_new_line = text.match(/\n"$/);
    // manage XML/HTML output slightly differently
    if (text.match(/^"&lt;/) &amp;&amp; text.match(/&gt;\n?"$/)) {
      text = text.replace(/^"/, '').replace(/"$/, '');
      if (has_new_line) text += '\n';
    }
    return text;
  }

  function displayLogs(logs) {
    var table = $('#log_table');
    var classMap = {
      'Warning': 'warning',
      'Error': 'danger'
    };
    table.empty();
    if (!logs) {
      return;
    }

    table.prepend('&lt;tr&gt;' +
      '&lt;th class="col-md-2"&gt;Level&lt;/th&gt;' +
      '&lt;th class="col-md-2"&gt;Date&lt;/th&gt;' +
      '&lt;th class="col-md-6"&gt;Value&lt;/th&gt;' +
      '&lt;th class="col-md-2"&gt;User&lt;/th&gt;&lt;/tr&gt;');

    $.each(logs, function (i, log) {
      var className = classMap[log.level];
      table.append('&lt;tr class="data-row text' + className + '"&gt;' +
          '&lt;td class="col-md-2 ' + className + '"&gt;' + log.level + '&lt;/td&gt;' +
          '&lt;td class="col-md-2 ' + className + '"&gt;' + log.created + '&lt;/td&gt;' +
          '&lt;td class="col-md-6 ' + className + '"&gt;' + htmlPre(escapeHtml(log.message)) + '&lt;/td&gt;' +
          '&lt;td class="col-md-2 ' + className + '"&gt;' + log.source + '&lt;/td&gt;' +
        '&lt;/tr&gt;');
    });
    $('#log_container').toggleClass('hidden', !logs.length);
  }

  function showTypes() {
    var target = $('#type_control');
    var show_types = {};
    var show_all = false;

    target.empty();

    // find which checkboxes to display
    $('#results_table tr')
        .find('td.type')
        .each(function () {
          var type = $(this).text();
          if (typeof display_types[type] === 'undefined') {
            display_types[type] = true; // default to being checked
          }
          show_types[type] = display_types[type];
          show_all = true;
        });

    if (show_all) {
      target.append('&lt;label class="checkbox-inline no_indent"&gt;' +
        '&lt;input type="checkbox" id="show_all" value="all" checked="checked" /&gt;' +
        'All&lt;/label&gt;');
    }

    $.each(show_types, function (type) {
      id = '' + type.replace(/\./g, '_');
      target.append('&lt;label class="checkbox-inline no_indent"&gt;' +
        '&lt;input type="checkbox" id="show_' + id + '" value="' + type + '" /&gt;' +
        type + '&lt;/label&gt;');
      $('#show_' + id).prop('checked', display_types[type]);
    });

    updateResultTypes();
    updateResults();
  }

  function updateResultTypes(setAll) {
    var isShowAllChecked = true;
    var checkboxes = $('#type_control input[type=checkbox]');

    if (typeof setAll === 'undefined') {
      checkboxes.each(function (i) {
        if (!i) return; // ignore show_all at 0
        display_types[this.value] = this.checked;
        isShowAllChecked = isShowAllChecked &amp;&amp; this.checked;
      });
      $('#show_all').prop('checked', isShowAllChecked);
    } else {
      checkboxes.each(function () {
        $(this).prop('checked', setAll);
        display_types[this.value] = setAll;
      });
    }

    checkboxes.each(function (i) {
      if (!i) return;
      $(this).parent().
        toggleClass('bg-success text-success', display_types[this.value]).
        toggleClass('bg-danger text-danger', !display_types[this.value]);
    });

  }

  function updateResults() {
    var isShowingProps = false;
    $('#results_table tr.data-row').each(function () {

      $this = $(this);
      var value = $this.find('td.type').text();
      $this.toggleClass('hidden', !display_types[value]);

      // show/hide the more info row
      var next = $this.next();
      if (next.hasClass('data-more')) {
        var state = $this.find('button.show-more').attr('data-show-more');
        next.toggleClass('hidden', !(display_types[value] &amp;&amp; state != 'false'));
      }

      isShowingProps = isShowingProps || display_types[value];
    });
    $('#no_props').toggleClass('hidden', isShowingProps);
  }

  // use the same class names as Google Code-Prettify
  var pretty_str_match = /^&amp;#39;.+&amp;#39;$|^&amp;quot;.+&amp;quot;$/g;
  var pretty_str_match2 = /&amp;#39;.+?&amp;#39;|&amp;quot;.+?&amp;quot;/g;
  function prettyPrint(str) {
    // handle strings and string with additional info
    if (str.match(pretty_str_match)) {
      return str.replace(pretty_str_match, function (m) {
        return '&lt;span class="str"&gt;' + m + '&lt;/span&gt;';
      });
    }
    if (str.match(pretty_str_match2)) {
      return str.replace(pretty_str_match2, function (m) {
        return '&lt;span class="str"&gt;' + m + '&lt;/span&gt;';
      });
    }
    if (str.match(/^[0-9.]+$/)) {
      return '&lt;span class="lit"&gt;' + str + '&lt;/span&gt;';
    }
    if ('null,undefined,true,false'.indexOf(str) &gt; -1) {
      return '&lt;span class="kwd"&gt;' + str + '&lt;/span&gt;';
    }
    return str;
  }

  var escapeHtml = (function () {
    var entityMap = {
      "&amp;": "&amp;amp;",
      "&lt;": "&amp;lt;",
      "&gt;": "&amp;gt;",
      '"': '&amp;quot;',
      "'": '&amp;#39;',
      "/": '&amp;#x2F;'
    };
    return function (string) {
      return String(string).replace(/[&amp;&lt;&gt;"'\/]/g, function (s) {
        return entityMap[s];
      });
    };
  })();

  function lineBreaks(text) {
    return text.toString().trim().replace(/\n/g, '&lt;br /&gt;');
  }

  var breadcrumbs = [];
  var display_types = {};
  var events = {};

  function SndXploreReporter() {

    this.addEvent = function (name, fn) {
      if (typeof events[name] !== 'object') {
        events[name] = [];
      }
      events[name].push(fn);
    };

    this.fireEvent = function (name, scope, args) {
      var eventArr = typeof events[name] === 'object' ? events[name] : null;
      if (!eventArr) return;
      for (var i = 0; i &lt; eventArr.length; i++) {
        if (typeof eventArr[i] === 'function') {
          eventArr[i].apply(scope || this, args);
        }
      }
    };

    this.initialize = function () {

      var sxr = this;

      $('#results_table,#description_table').on('click', '.show-more', function () {
        // summary:
        //   Handle the 'Show...' button click for a result

        var $this = $(this);
        var target = $this.parents('tr').next();
        var doHide = $this.attr('data-show-more') != 'false';

        var show = '&lt;span class="glyphicon glyphicon-expand"&gt;&lt;/span&gt; Show';
        var hide = '&lt;span class="glyphicon glyphicon-collapse-up"&gt;&lt;/span&gt; Hide';

        target.toggleClass('hidden', doHide);
        $this.html(doHide ? show : hide);
        $this.toggleClass('active', !doHide);
        $this.attr('data-show-more', doHide ? 'false' : 'true');

      });

      $('#results_table').on('click', 'a.interactive', function () {
        // summary:
        //   Make property names interactive so we can dive into an object


        var $breadcrumb = $('ul#breadcrumb');
        var pos = breadcrumbs.length - 1;
        var text = $(this).text();

        // make the last breadcrumb active
        if (breadcrumbs.length) {
          $breadcrumb.children().remove(':last');
          $breadcrumb.append('&lt;li&gt;&lt;a href="javascript:void(0)" id="breadcrumb_' +
              pos + '"&gt;' + breadcrumbs[pos] + '&lt;/a&gt;&lt;/li&gt;');
        }

        // add the new last breadcrumb
        $breadcrumb
            .append('&lt;li&gt;' + text + '&lt;/li&gt;')
            .removeClass('hidden');

        breadcrumbs.push(text);

        sxr.fireEvent('click.interactive-result', this);
      });

      $('ul#breadcrumb').on('click', 'a', function () {
        // summary:
        //   add the event handler for clicking on a breadcrumb to remove it

        var $breadcrumb = $('ul#breadcrumb');

        // remove unnecessary breadcrumb elements
        var pos = parseInt(this.id.split('_')[1], 10);
        var removeCount = breadcrumbs.length - 1 - pos;
        if (removeCount) {

          // remove all the nodes, including this one
          $breadcrumb
            .find('li:nth-last-child(-n+' + (removeCount + 1) + '):not(.permanent)')
            .remove();

          // update the breadcrumb array
          breadcrumbs = breadcrumbs.
              slice(0, $breadcrumb.children(':not(.permanent)').size() + 1);

          // re-add this node as a non-anchored breadcrumb
          if (breadcrumbs.length) {
            $breadcrumb.append('&lt;li&gt;' + breadcrumbs[breadcrumbs.length - 1] + '&lt;/li&gt;');
          }

          $breadcrumb.toggleClass('hidden', !breadcrumbs.length);
          sxr.fireEvent('click.breadcrumb', this);
        }
      });

      $('#type_control').on('change', 'input[type=checkbox]', function () {
        // summary:
        //   restrict the results based on the type checkboxes that are checked

        if (this.id == 'show_all') {
          updateResultTypes(this.checked);
        } else {
          updateResultTypes();
        }

        updateResults();
      });
    };

    this.start = function (params) {
      this.options = params;
      this.fireEvent('start', null, [params]);
    };

    this.done = function (result) {
      var target = $('#results');
      $('#node_log_url').val(result.node_log_url);
      target.empty();
      displayResults(result, this.options);
      this.fireEvent('done', null, [result]);
    };

    this.getBreadcrumb = function () {
      return breadcrumbs.join('.');
    };

    this.clearBreadcrumb = function () {
      breadcrumbs.length = 0;
      $('ul#breadcrumb').addClass('hidden').find('li:not(.permanent)').remove();
    };

  }

  return new SndXploreReporter();
}());]]&gt;&lt;/script&gt;&lt;script_name/&gt;&lt;sys_class_name&gt;sys_ui_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;james@thewhitespace.io&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2015-09-23 23:34:14&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;true&lt;/sys_customer_update&gt;&lt;sys_id&gt;c9abed770f2a820094f3c09ce1050e7f&lt;/sys_id&gt;&lt;sys_mod_count&gt;153&lt;/sys_mod_count&gt;&lt;sys_name&gt;snd_xplore_reporter&lt;/sys_name&gt;&lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="[ws] Xplore: Developer Toolkit"&gt;0f6ab99a0f36060094f3c09ce1050ee8&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_script_c9abed770f2a820094f3c09ce1050e7f&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;james@thewhitespace.io&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2017-05-20 22:21:54&lt;/sys_updated_on&gt;&lt;use_scoped_format&gt;false&lt;/use_scoped_format&gt;&lt;/sys_ui_script&gt;&lt;/record_update&gt;</payload>
<payload_hash/>
<remote_update_set display_value="[ws] Xplore: Developer Toolkit - 4.5">c1bde016dbdc8e10b0fa3fd3e296194c</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>kyle.stinar@continuant.com</sys_created_by>
<sys_created_on>2024-02-13 17:49:24</sys_created_on>
<sys_id>d9bde016dbdc8e10b0fa3fd3e2961950</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1628c66dfd80000000</sys_recorded_at>
<sys_updated_by>kyle.stinar@continuant.com</sys_updated_by>
<sys_updated_on>2024-02-13 17:49:24</sys_updated_on>
<table/>
<target_name>snd_xplore_reporter</target_name>
<type>UI Script</type>
<update_domain>global</update_domain>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore: Developer Toolkit">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_ui_macro_b6e5deb30f5d528094f3c09ce1050e71</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ui_macro"&gt;&lt;sys_ui_macro action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;category&gt;general&lt;/category&gt;&lt;description/&gt;&lt;media_type/&gt;&lt;name&gt;snd_xplore_info&lt;/name&gt;&lt;scoped_name/&gt;&lt;sys_class_name&gt;sys_ui_macro&lt;/sys_class_name&gt;&lt;sys_created_by&gt;james@thewhitespace.io&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2016-02-07 19:31:05&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;true&lt;/sys_customer_update&gt;&lt;sys_id&gt;b6e5deb30f5d528094f3c09ce1050e71&lt;/sys_id&gt;&lt;sys_mod_count&gt;68&lt;/sys_mod_count&gt;&lt;sys_name&gt;snd_xplore_info&lt;/sys_name&gt;&lt;sys_package display_value="[ws] Xplore: Developer Toolkit" source="0f6ab99a0f36060094f3c09ce1050ee8"&gt;0f6ab99a0f36060094f3c09ce1050ee8&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="[ws] Xplore: Developer Toolkit"&gt;0f6ab99a0f36060094f3c09ce1050ee8&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_macro_b6e5deb30f5d528094f3c09ce1050e71&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;james@thewhitespace.io&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2017-05-20 22:21:58&lt;/sys_updated_on&gt;&lt;xml&gt;&lt;![CDATA[&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null"&gt;
&lt;div class="row" style="margin-top: 12px; font-size: 14px;"&gt;

  &lt;div class="col-xs-10 col-xs-offset-1"&gt;

    &lt;div class="alert alert-danger"&gt;
      &lt;strong&gt;Warning:&lt;/strong&gt; This utility runs code in your
      environment. Make sure you know what you are doing as it is
      entirely possible for you to screw up your instance.
    &lt;/div&gt;

    &lt;div class="panel panel-default"&gt;
      &lt;div class="panel-body"&gt;
        &lt;h2&gt;Thanks!&lt;/h2&gt;
        &lt;p&gt;Congrats downloading Xplore: Developer Toolkit - the free, independently developed
          utility for ServiceNow that has been built 'for developers, by developers'.&lt;/p&gt;

        &lt;p&gt;If this is your first time, perhaps take a minute to read through:
          &lt;ol&gt;
            &lt;li&gt;&lt;a href="#i_script_editor"&gt;Script Editor&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href="#i_user_data"&gt;User Data&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href="#i_regex"&gt;Regular Expressions&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href="#i_table_hierarchy"&gt;Table Hierarchy&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href="#i_logs"&gt;Logs&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href="#i_tips"&gt;Tips&lt;/a&gt;&lt;/li&gt;
          &lt;/ol&gt;
        &lt;/p&gt;

        &lt;p&gt;We also really appreciate all the community feedback and input we get!&lt;/p&gt;
        &lt;ul class="list-unstyled"&gt;
          &lt;li&gt;
            &lt;a href="https://share.servicenow.com/app.do#/search-result?search_query=whitespace${AMP}startRow=NaN${AMP}sort_parameter=title"
              target="_blank"&gt;
              &lt;span class="glyphicon glyphicon-thumbs-up"&gt;&lt;/span&gt;
              Write a review or download our other apps&lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href="https://github.com/sn-developer/Xplore" target="_blank"&gt;
            &lt;span class="glyphicon glyphicon-wrench"&gt;&lt;/span&gt;
            Contribute on GitHub&lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href="mailto:info@thewhitespace.io?subject=Xplore Feedback"&gt;
              &lt;span class="glyphicon glyphicon-envelope"&gt;&lt;/span&gt;
              Say hello!&lt;/a&gt;
          &lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;Thanks!&lt;/p&gt;
        &lt;p&gt;&lt;a href="https://twitter.com/James_Neale" target="_blank"&gt;James&lt;/a&gt;
        and
        &lt;a href="https://twitter.com/simthort" target="_blank"&gt;Tim&lt;/a&gt;
        &lt;/p&gt;

        &lt;p class="small"&gt;
          &lt;a href="https://thewhitespace.io" target="_blank"&gt;thewhitespace.io&lt;/a&gt;
          |
          &lt;a href="https://twitter.com/intent/tweet?button_hashtag=Xplore${AMP}text=My%20job%20as%20a%20%23servicenowdev%20just%20got%20a%20lot%20easier!%20%40whitesp_" class="twitter-hashtag-button" data-related="whitespace" data-url="https://goo.gl/fAyYTA" target="_blank"&gt;Tweet #Xplore&lt;/a&gt;
          |
          &lt;a href="https://twitter.com/whitesp_" class="twitter-follow-button"
          data-show-count="false" target="_blank"&gt;Follow @whitesp_&lt;/a&gt;
          |
          &lt;a href="https://www.linkedin.com/company/whitespace-studios" target="_blank"&gt;Find us on LinkedIn&lt;/a&gt;
        &lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="panel panel-default" id="i_script_editor"&gt;
      &lt;div class="panel-body"&gt;
        &lt;h2&gt;Script Editor&lt;/h2&gt;
        &lt;p&gt;Use the script editor on the left to write and run scripts
          in ServiceNow, much like a background script, but
          supercharged. The last object in the script will be shown
          here in a detailed output tab.&lt;/p&gt;
        &lt;p&gt;Use the choice list to choose where you want to run your
          code, either server or client.&lt;/p&gt;
        &lt;p&gt;Launching Xplore from within ServiceNow will give you
          access to the various frames ServiceNow uses.&lt;/p&gt;
        &lt;p&gt;
          Not sure what to do? Try one of these demos:
          &lt;div class="list-group xplore_demo"&gt;
            &lt;a data-demo="GlideRecord" href="#demo"
              class="list-group-item"&gt;Demo: GlideRecord&lt;/a&gt;
            &lt;a data-demo="GlideRecord.get" href="#demo"
              class="list-group-item"&gt;Demo: GlideRecord.get&lt;/a&gt;
            &lt;a data-demo="Array" href="#demo"
              class="list-group-item"&gt;Demo: Array&lt;/a&gt;
            &lt;a data-demo="GlideUser" href="#demo"
              class="list-group-item"&gt;Demo: GlideUser&lt;/a&gt;
            &lt;a data-demo="Logging" href="#demo"
              class="list-group-item"&gt;Demo: Logging and Messages&lt;/a&gt;
            &lt;a data-demo="scope" href="#demo"
              class="list-group-item"&gt;Demo: Current scope&lt;/a&gt;
          &lt;/div&gt;
        &lt;/p&gt;
        &lt;p class="alert alert-warning"&gt;Tip: Use the keyboard shortcut
          &lt;kbd&gt;Ctrl + Enter&lt;/kbd&gt; to run.&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="panel panel-default" id="i_user_data"&gt;
      &lt;div class="panel-body"&gt;
        &lt;h2&gt;User Data&lt;/h2&gt;
        &lt;p&gt;Paste in large chunks of text like XML and work with
          them in your script.&lt;/p&gt;
        &lt;div class="list-group xplore_demo"&gt;
          &lt;a data-demo="user_data" href="#demo"
            class="list-group-item"&gt;Demo: Format XML&lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="panel panel-default" id="i_regex"&gt;
      &lt;div class="panel-body"&gt;
        &lt;h2&gt;Regular Expressions&lt;/h2&gt;
        &lt;p&gt;You can test out regular expressions natively in ServiceNow!&lt;/p&gt;
        &lt;p&gt;If you've done any work with regular expressions then you will know
          that sometimes regular expressions don't work the same way
          in ServiceNow as they do in browsers or other languages.&lt;/p&gt;
        &lt;p&gt;Simply type in your expression and a test string, give
          it a second, and it will automatically test your expression
          for you and show you the results - including the match groupings.&lt;/p&gt;
        &lt;p class="alert alert-warning"&gt;Tip: You can also test expressions in your
          browser by changing from 'Server' to 'Client'&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="panel panel-default" id="i_table_hierarchy"&gt;
      &lt;div class="panel-body"&gt;
        &lt;h2&gt;Table Hierarchy&lt;/h2&gt;
        &lt;p&gt;The table hierarchy tool allows you to view the hiearchy
          of a table in an interactive view.&lt;/p&gt;
        &lt;p&gt;Type in the name or label of a table you are interested
          in and hit &lt;kbd&gt;Enter&lt;/kbd&gt;&lt;/p&gt;
        &lt;p&gt;Navigate through the hierarchy (very useful for things
          like cmdb_ci) and use handy links to open the list or
          form view of any table.&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="panel panel-default" id="i_logs"&gt;
      &lt;div class="panel-body"&gt;
        &lt;h2&gt;System Logs&lt;/h2&gt;
        &lt;p&gt;The system and node logs are embedded into Xplore for easy access.&lt;/p&gt;
        &lt;p class="alert alert-warning"&gt;Xplore automatically sets the Node
        logs search parameters so you only see the logs from the code you
        ran last.&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="panel panel-default" id="i_tips"&gt;
      &lt;div class="panel-body"&gt;
        &lt;h2&gt;Tips&lt;/h2&gt;
        &lt;h4&gt;Logging&lt;/h4&gt;
        &lt;p&gt;Xplore supports capturing server messages using the
          following native ServiceNow logging functions:&lt;/p&gt;
        &lt;ul class="list-example"&gt;
          &lt;li&gt;&lt;code&gt;gs.log("Hello world")&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code&gt;gs.print("Hello world")&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code&gt;gs.info("Hello world")&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code&gt;gs.warn("Hello world")&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code&gt;gs.error("Hello world")&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code&gt;gs.addInfoMessage("Hello world")&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code&gt;gs.addErrorMessage("Hello world")&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;Some server exceptions result in the transaction being aborted by
          ServiceNow which means you will have limited (if any) output.
          Xplore helps with this by automatically retrieving
          the session log statements that were generated up to the time of the error
         (using the functions shown above) and showing them in the output pane.
        &lt;/p&gt;

        &lt;p&gt;Client side logs can be captured as well:&lt;/p&gt;
        &lt;ul class="list-example"&gt;
          &lt;li&gt;&lt;code&gt;jslog("Hello world")&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;

        &lt;h4&gt;Script Include&lt;/h4&gt;
        &lt;p&gt;Xplore is based on a global Script Include that you can
          run anywhere in ServiceNow.&lt;/p&gt;

        &lt;p&gt;&lt;code&gt;new snd_Xplore().xplore(obj /*, reporter, options */)&lt;/code&gt;&lt;/p&gt;
        &lt;p class="col-xs-12"&gt;Iterate over any object to retrieve its contents.
          Optionally provide a reporter and options. The default reporter will
          print everything using gs.print(). This page uses a custom print
          reporter to generate JSON and package it all back to the client
          over AJAX.&lt;/p&gt;

        &lt;p&gt;&lt;code&gt;new snd_Xplore().lookAt(obj /*, name, show_strings */)&lt;/code&gt;&lt;/p&gt;
        &lt;p class="col-xs-12"&gt;The magic method that works out what any object
          is and even attempts to find it's contents.&lt;/p&gt;

        &lt;p&gt;&lt;code&gt;snd_Xplore.blacklist('illegalProp')&lt;/code&gt;&lt;/p&gt;
        &lt;p class="col-xs-12"&gt;Blacklisted properties are those that throw illegal
          access exceptions. ServiceNow don't even want you trying to access these,
          let alone see their value. Xplore has a built in template to filter the
          majority of these, but sometimes they will slip through. Bypass these
          properties on the fly, or add the property to the 'blacklist' array
          in the snd_xplore Script Include.&lt;/p&gt;

        &lt;p&gt;&lt;code&gt;snd_Xplore.redlist('illegalProp')&lt;/code&gt;&lt;/p&gt;
        &lt;p class="col-xs-12"&gt;Redlisted properties are those that don't have a
          toString function associated. These can throw errors, so you might not
          want to show them.&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;div class="row" id="i_credits"&gt;
  &lt;div class="col-xs-12"&gt;
    &lt;p&gt;
      Version: ${snd_Xplore.getVersion()}. The UI client uses
      &lt;a href="http://getbootstrap.com/" target="_blank"&gt;Bootstrap&lt;/a&gt;,
      &lt;a href="http://jquery.com/" target="_blank"&gt;JQuery&lt;/a&gt;,
      &lt;a href="http://codemirror.net/" target="_blank"&gt;CodeMirror&lt;/a&gt;,
      &lt;a href="http://www.bootstraptoggle.com/"&gt;Bootstrap Toggle&lt;/a&gt;,
      &lt;a href="http://github.com/google/code-prettify"&gt;Google Code-Prettify&lt;/a&gt;.
      and &lt;a href="https://github.com/codedance/jquery.AreYouSure"&gt;jQuery Plugin: Are-You-Sure&lt;/a&gt;.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/j:jelly&gt;]]&gt;&lt;/xml&gt;&lt;/sys_ui_macro&gt;&lt;/record_update&gt;</payload>
<payload_hash/>
<remote_update_set display_value="[ws] Xplore: Developer Toolkit - 4.5">c1bde016dbdc8e10b0fa3fd3e296194c</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>kyle.stinar@continuant.com</sys_created_by>
<sys_created_on>2024-02-13 17:49:24</sys_created_on>
<sys_id>ddbde016dbdc8e10b0fa3fd3e296194f</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1628c66dfd80000000</sys_recorded_at>
<sys_updated_by>kyle.stinar@continuant.com</sys_updated_by>
<sys_updated_on>2024-02-13 17:49:24</sys_updated_on>
<table/>
<target_name>snd_xplore_info</target_name>
<type>Macro</type>
<update_domain>global</update_domain>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
</unload>
